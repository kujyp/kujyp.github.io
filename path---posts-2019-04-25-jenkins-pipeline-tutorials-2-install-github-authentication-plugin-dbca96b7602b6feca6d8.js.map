{"version":3,"sources":["webpack:///path---posts-2019-04-25-jenkins-pipeline-tutorials-2-install-github-authentication-plugin-dbca96b7602b6feca6d8.js","webpack:///./.cache/json/posts-2019-04-25-jenkins-pipeline-tutorials-2-install-github-authentication-plugin.json"],"names":["webpackJsonp","417","module","exports","data","site","siteMetadata","title","subtitle","author","name","github","disqusShortname","url","markdownRemark","id","html","fields","slug","tagSlugs","frontmatter","tags","date","description","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,cAAAC,SAAA,gCAAAC,QAA2EC,KAAA,QAAAC,OAAA,SAAgCC,gBAAA,QAAAC,IAAA,4BAA4DC,gBAAmBC,GAAA,6JAAAC,KAAA,k7NAAAC,QAAusOC,KAAA,4FAAAC,UAAA,mBAAiIC,aAAgBb,MAAA,uEAAAc,MAAA,WAAAC,KAAA,2BAAAC,YAAA,2CAA4LC,aAAgBN,KAAA","file":"path---posts-2019-04-25-jenkins-pipeline-tutorials-2-install-github-authentication-plugin-dbca96b7602b6feca6d8.js","sourcesContent":["webpackJsonp([80501578220077],{\n\n/***/ 417:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"kujyp 개발블로그\",\"subtitle\":\"ML DevOps, Python, Docker ...\",\"author\":{\"name\":\"kujyp\",\"github\":\"kujyp\"},\"disqusShortname\":\"kujyp\",\"url\":\"https://kujyp.github.io\"}},\"markdownRemark\":{\"id\":\"/home/circleci/app/src/pages/posts/2019-04-25---Jenkins-pipeline-tutorials---2--Install-github-authentication-plugin.md absPath of file >>> MarkdownRemark\",\"html\":\"<h3>개요</h3>\\n<p>아래 스펙의 jenkins를 설치하는것을 목적으로 합니다.</p>\\n<ul>\\n<li>jenkins(host container)를 docker image를 사용하여 구동합니다.</li>\\n<li>jenkins login을 github auth와 연동합니다.</li>\\n<li>UI로 blueocean을 사용합니다.</li>\\n<li>Jenkins job item 으로 pipeline job(organization, multi branch) 을 사용합니다.</li>\\n<li>Groovy 언어로 작성된 Jenkinsfile 을 사용합니다.</li>\\n<li>메일발송으로 emailext plugin를 사용합니다.</li>\\n<li>jenkins job을 docker agent를 사용하여 구동합니다.(위의 host container와 구분되는 runner container 입니다)</li>\\n</ul>\\n<h2>목차</h2>\\n<ul>\\n<li>\\n<p><a href=\\\"/posts/2019-04-14---Jenkins-pipeline-tutorials---1--Install-Jenkins/\\\">1. Install Jenkins</a></p>\\n<ul>\\n<li>1-1. docker 설치</li>\\n<li>1-2. jenkins container 실행</li>\\n<li>1-3. jenkins web 접속</li>\\n</ul>\\n</li>\\n<li>\\n<p><a href=\\\"/posts/2019-04-25---Jenkins-pipeline-tutorials---2--Install-github-authentication-plugin/\\\"><strong>2. Install github authentication plugin</strong></a></p>\\n<ul>\\n<li>2-1. plugin 설치</li>\\n<li>2-2. plugin 설정</li>\\n</ul>\\n</li>\\n<li><a href=\\\"/posts/2019-05-01---Jenkins-pipeline-tutorials---3--Webhook-settings/\\\">3. Webhook settings</a></li>\\n<li>\\n<p><a href=\\\"/posts/2019-05-06---Jenkins-pipeline-tutorials---4--Jenkins-Job-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/\\\">4. Jenkins Job 생성하기</a></p>\\n<ul>\\n<li>4-1. Pipeline Organization job 생성하기</li>\\n<li>4-2. tag automatic trigger 문제</li>\\n<li>4-3. tag automatic trigger 문제해결</li>\\n</ul>\\n</li>\\n<li>\\n<p>(미작성)</p>\\n<ul>\\n<li>\\n<ol start=\\\"5\\\">\\n<li>jenkins concurrency\\n<br/></li>\\n</ol>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<h2>과정</h2>\\n<h3>2. Install github authentication plugin</h3>\\n<h4>2-1. plugin 설치</h4>\\n<ul>\\n<li>아까 입력한 관리자계정으로 접속해줍니다.<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56739946-df4d5800-67aa-11e9-901d-acaf9deea301.png\\\" alt=\\\"9627d258-10f3-11e9-8b36-c0524e734271\\\"><br/><br/></li>\\n<li>Manage Jenkins - Manage plugins - available탭 들어갑니다.<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56739948-df4d5800-67aa-11e9-924e-7c13b76a4c17.gif\\\" alt=\\\"d4dbc9b4-10f3-11e9-8eea-cd02d396bca7\\\"><br/><br/></li>\\n<li>github authentication plugin 체크, download now and install after restart를 선택합니다.<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56739949-df4d5800-67aa-11e9-85f8-3111d6b7f62d.gif\\\" alt=\\\"0a74cec2-10f4-11e9-82bd-04d9e3da1111\\\"><br/><br/></li>\\n<li>왜인지모르지만 아래화면에서 멈춰있어서 restart jenkins when installation is complete and no jobs are running 체크했습니다.<br/>\\n(원래 자동으로 되는데)<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56739951-dfe5ee80-67aa-11e9-9b99-e510d3bfc706.png\\\" alt=\\\"32c607ce-10f4-11e9-8f11-f63c704a2ebf\\\">\\n<br/><br/></li>\\n</ul>\\n<h4>2-2. plugin 설정</h4>\\n<ul>\\n<li>manage jenkins - configure global security - github authentication plugin 선택합니다.<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56742603-05c1c200-67b0-11e9-9676-bc06b4d74f8c.gif\\\" alt=\\\"cc5f1df2-1113-11e9-9829-df19061f64bd\\\"><br/><br/></li>\\n<li>GitHub Web URI - <a href=\\\"https://github.com\\\">https://github.com</a> <br/>\\nGitHub API URI - <a href=\\\"https://api.github.com\\\">https://api.github.com</a> <br/></li>\\n<li>참고: github enterprise 의 경우 아래 내용을 입력해줍니다.<br/>\\nGitHub Web URI - <a href=\\\"https://GITHUB-ENTERPRISE-URL\\\">https://GITHUB-ENTERPRISE-URL</a> <br/>\\nGitHub API URI - <a href=\\\"https://GITHUB-ENTERPRISE-URL/api/v3\\\">https://GITHUB-ENTERPRISE-URL/api/v3</a> <br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56743369-64d40680-67b1-11e9-9c90-beb763083fac.png\\\" alt=\\\"스크린샷 2019-04-25 오후 11 25 04\\\">\\n<br/><br/></li>\\n<li>client id, client secret 는 github 에서 <code class=\\\"language-text\\\">OAuth app</code>을 등록한뒤 생성되는 값을 가져와줍니다.<br/>\\nOAuth 발급링크: <a href=\\\"https://github.com/settings/applications/new\\\">https://github.com/settings/applications/new</a> <br/>\\n참고: github enterprise 의 경우 <a href=\\\"https://GITHUB-ENTERPRISE-URL/settings/applications/new\\\">https://GITHUB-ENTERPRISE-URL/settings/applications/new</a> <br/></li>\\n<li>Register a new OAuth application 페이지에서<br/>\\nhomepage url - <a href=\\\"http://USER-JENKINS-HOST/\\\">http://USER-JENKINS-HOST/</a> <br/>\\nAuthorization callback URL - <a href=\\\"http://USER-JENKINS-HOST/securityRealm/finishLogin\\\">http://USER-JENKINS-HOST/securityRealm/finishLogin</a> <br/>\\n를 입력, Register application 을 클릭해줍니다.<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56742604-05c1c200-67b0-11e9-9de7-d8e2543ad903.png\\\" alt=\\\"스크린샷 2019-04-25 오후 10 52 47\\\">\\n<br/><br/></li>\\n<li>OAuth app 이 생성된뒤 뜨는 Client ID, Client Secret 을 jenkins 설정으로 가져옵니다.<br/>\\n(detail을 위해 logo도 Upload 했습니다…)<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56742605-05c1c200-67b0-11e9-9783-ad84894bfe32.png\\\" alt=\\\"스크린샷 2019-04-25 오후 10 55 56\\\">\\n<br/><br/></li>\\n<li>가져온 Client ID, Secret 입력해줍니다.\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56742606-05c1c200-67b0-11e9-8bd1-debc994b9475.png\\\" alt=\\\"스크린샷 2019-04-25 오후 10 58 22\\\">\\n<br/><br/></li>\\n<li>Jenkins configure security 화면에서 아래의 Authorization - Matrix-based security를 선택<br/>\\nAdd user or group으로 <code class=\\\"language-text\\\">GITHUB-ORGANIZATION-NAME</code>를 넣어줍니다.<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56744137-e37d7380-67b2-11e9-9609-696ab3f38edf.png\\\" alt=\\\"스크린샷 2019-04-25 오후 10 59 21\\\">\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56744208-07d95000-67b3-11e9-8d36-622cc0fdba8e.png\\\" alt=\\\"스크린샷 2019-04-25 오후 10 59 32\\\">\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56744210-07d95000-67b3-11e9-8166-1d0f3aa0d12d.png\\\" alt=\\\"스크린샷 2019-04-25 오후 10 59 46\\\">\\n<br/><br/></li>\\n<li>모든권한을 부여합니다.<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56744745-08beb180-67b4-11e9-96ce-e935542220e4.gif\\\" alt=\\\"2225ed0b11fc77c412634d3ba13bb375\\\">\\n<br/><br/></li>\\n<li>save 클릭. 이제 아까 생성한 관리자계정은 github 로 가입한 계정이 아니기때문에 모든 권한을 잃어버립니다.<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56744765-11af8300-67b4-11e9-8c45-1db3416b6c0c.png\\\" alt=\\\"스크린샷 2019-04-25 오후 11 00 34\\\">\\n<br/><br/></li>\\n<li>다시 로그인하면 github 계정에게 authorize 요청 창이 뜨고, 승인하면 로그인이 완료됩니다.<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56744852-3c99d700-67b4-11e9-8735-2d71bdcfbcc5.png\\\" alt=\\\"스크린샷 2019-04-25 오후 11 02 13\\\">\\n<br/><br/></li>\\n<li>주의: github Authorize 주기 전 꼭 해당 Organization 에 대한 열람권한을 Grant 해줘야합니다.<br/>\\n이 과정을 생략하면, 해당 Organization의 멤버인지 확인할 방법이 없기때문에 jenkins는 해당 유저에게 권한을 주지않습니다.<br/>\\n(최초 Jenkins 가입시 Grant 되어있지않으면, 이후에 github settings 에 들어가 Organization 열람권한을 주더라도 Jenkins는 권한을 주지 없습니다.)\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56744964-68b55800-67b4-11e9-99bb-27db9edf094c.gif\\\" alt=\\\"34f5a7b3e3b206779cff94b7fc977db3\\\">\\n<br/><br/></li>\\n<li>참고: 이 경우 방금 로그아웃한 페이지(<a href=\\\"http://USER-JENKINS-HOST/githubLogout/\\\">http://USER-JENKINS-HOST/githubLogout/</a> )로 리디렉션되기때문에 don’t run away라는 창이 표시됩니다. 메인으로 이동해줍니다.<br/>\\n<br/><br/></li>\\n<li>github authentication 연동 완료.<br/>\\nref: plugin 문서 <a href=\\\"https://wiki.jenkins.io/display/JENKINS/GitHub+OAuth+Plugin\\\">https://wiki.jenkins.io/display/JENKINS/GitHub+OAuth+Plugin</a>\\n<br/><br/></li>\\n</ul>\",\"fields\":{\"slug\":\"/posts/2019-04-25---Jenkins-pipeline-tutorials---2--Install-github-authentication-plugin/\",\"tagSlugs\":[\"/tags/jenkins/\"]},\"frontmatter\":{\"title\":\"Jenkins pipeline tutorials - 2. Install github authentication plugin\",\"tags\":[\"jenkins\"],\"date\":\"2019-04-25T23:53:00+0900\",\"description\":\"github authentication plugin 을 연동합니다.\"}}},\"pathContext\":{\"slug\":\"/posts/2019-04-25---Jenkins-pipeline-tutorials---2--Install-github-authentication-plugin/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-2019-04-25-jenkins-pipeline-tutorials-2-install-github-authentication-plugin-dbca96b7602b6feca6d8.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"kujyp 개발블로그\",\"subtitle\":\"ML DevOps, Python, Docker ...\",\"author\":{\"name\":\"kujyp\",\"github\":\"kujyp\"},\"disqusShortname\":\"kujyp\",\"url\":\"https://kujyp.github.io\"}},\"markdownRemark\":{\"id\":\"/home/circleci/app/src/pages/posts/2019-04-25---Jenkins-pipeline-tutorials---2--Install-github-authentication-plugin.md absPath of file >>> MarkdownRemark\",\"html\":\"<h3>개요</h3>\\n<p>아래 스펙의 jenkins를 설치하는것을 목적으로 합니다.</p>\\n<ul>\\n<li>jenkins(host container)를 docker image를 사용하여 구동합니다.</li>\\n<li>jenkins login을 github auth와 연동합니다.</li>\\n<li>UI로 blueocean을 사용합니다.</li>\\n<li>Jenkins job item 으로 pipeline job(organization, multi branch) 을 사용합니다.</li>\\n<li>Groovy 언어로 작성된 Jenkinsfile 을 사용합니다.</li>\\n<li>메일발송으로 emailext plugin를 사용합니다.</li>\\n<li>jenkins job을 docker agent를 사용하여 구동합니다.(위의 host container와 구분되는 runner container 입니다)</li>\\n</ul>\\n<h2>목차</h2>\\n<ul>\\n<li>\\n<p><a href=\\\"/posts/2019-04-14---Jenkins-pipeline-tutorials---1--Install-Jenkins/\\\">1. Install Jenkins</a></p>\\n<ul>\\n<li>1-1. docker 설치</li>\\n<li>1-2. jenkins container 실행</li>\\n<li>1-3. jenkins web 접속</li>\\n</ul>\\n</li>\\n<li>\\n<p><a href=\\\"/posts/2019-04-25---Jenkins-pipeline-tutorials---2--Install-github-authentication-plugin/\\\"><strong>2. Install github authentication plugin</strong></a></p>\\n<ul>\\n<li>2-1. plugin 설치</li>\\n<li>2-2. plugin 설정</li>\\n</ul>\\n</li>\\n<li><a href=\\\"/posts/2019-05-01---Jenkins-pipeline-tutorials---3--Webhook-settings/\\\">3. Webhook settings</a></li>\\n<li>\\n<p><a href=\\\"/posts/2019-05-06---Jenkins-pipeline-tutorials---4--Jenkins-Job-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/\\\">4. Jenkins Job 생성하기</a></p>\\n<ul>\\n<li>4-1. Pipeline Organization job 생성하기</li>\\n<li>4-2. tag automatic trigger 문제</li>\\n<li>4-3. tag automatic trigger 문제해결</li>\\n</ul>\\n</li>\\n<li>\\n<p>(미작성)</p>\\n<ul>\\n<li>\\n<ol start=\\\"5\\\">\\n<li>jenkins concurrency\\n<br/></li>\\n</ol>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<h2>과정</h2>\\n<h3>2. Install github authentication plugin</h3>\\n<h4>2-1. plugin 설치</h4>\\n<ul>\\n<li>아까 입력한 관리자계정으로 접속해줍니다.<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56739946-df4d5800-67aa-11e9-901d-acaf9deea301.png\\\" alt=\\\"9627d258-10f3-11e9-8b36-c0524e734271\\\"><br/><br/></li>\\n<li>Manage Jenkins - Manage plugins - available탭 들어갑니다.<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56739948-df4d5800-67aa-11e9-924e-7c13b76a4c17.gif\\\" alt=\\\"d4dbc9b4-10f3-11e9-8eea-cd02d396bca7\\\"><br/><br/></li>\\n<li>github authentication plugin 체크, download now and install after restart를 선택합니다.<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56739949-df4d5800-67aa-11e9-85f8-3111d6b7f62d.gif\\\" alt=\\\"0a74cec2-10f4-11e9-82bd-04d9e3da1111\\\"><br/><br/></li>\\n<li>왜인지모르지만 아래화면에서 멈춰있어서 restart jenkins when installation is complete and no jobs are running 체크했습니다.<br/>\\n(원래 자동으로 되는데)<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56739951-dfe5ee80-67aa-11e9-9b99-e510d3bfc706.png\\\" alt=\\\"32c607ce-10f4-11e9-8f11-f63c704a2ebf\\\">\\n<br/><br/></li>\\n</ul>\\n<h4>2-2. plugin 설정</h4>\\n<ul>\\n<li>manage jenkins - configure global security - github authentication plugin 선택합니다.<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56742603-05c1c200-67b0-11e9-9676-bc06b4d74f8c.gif\\\" alt=\\\"cc5f1df2-1113-11e9-9829-df19061f64bd\\\"><br/><br/></li>\\n<li>GitHub Web URI - <a href=\\\"https://github.com\\\">https://github.com</a> <br/>\\nGitHub API URI - <a href=\\\"https://api.github.com\\\">https://api.github.com</a> <br/></li>\\n<li>참고: github enterprise 의 경우 아래 내용을 입력해줍니다.<br/>\\nGitHub Web URI - <a href=\\\"https://GITHUB-ENTERPRISE-URL\\\">https://GITHUB-ENTERPRISE-URL</a> <br/>\\nGitHub API URI - <a href=\\\"https://GITHUB-ENTERPRISE-URL/api/v3\\\">https://GITHUB-ENTERPRISE-URL/api/v3</a> <br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56743369-64d40680-67b1-11e9-9c90-beb763083fac.png\\\" alt=\\\"스크린샷 2019-04-25 오후 11 25 04\\\">\\n<br/><br/></li>\\n<li>client id, client secret 는 github 에서 <code class=\\\"language-text\\\">OAuth app</code>을 등록한뒤 생성되는 값을 가져와줍니다.<br/>\\nOAuth 발급링크: <a href=\\\"https://github.com/settings/applications/new\\\">https://github.com/settings/applications/new</a> <br/>\\n참고: github enterprise 의 경우 <a href=\\\"https://GITHUB-ENTERPRISE-URL/settings/applications/new\\\">https://GITHUB-ENTERPRISE-URL/settings/applications/new</a> <br/></li>\\n<li>Register a new OAuth application 페이지에서<br/>\\nhomepage url - <a href=\\\"http://USER-JENKINS-HOST/\\\">http://USER-JENKINS-HOST/</a> <br/>\\nAuthorization callback URL - <a href=\\\"http://USER-JENKINS-HOST/securityRealm/finishLogin\\\">http://USER-JENKINS-HOST/securityRealm/finishLogin</a> <br/>\\n를 입력, Register application 을 클릭해줍니다.<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56742604-05c1c200-67b0-11e9-9de7-d8e2543ad903.png\\\" alt=\\\"스크린샷 2019-04-25 오후 10 52 47\\\">\\n<br/><br/></li>\\n<li>OAuth app 이 생성된뒤 뜨는 Client ID, Client Secret 을 jenkins 설정으로 가져옵니다.<br/>\\n(detail을 위해 logo도 Upload 했습니다…)<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56742605-05c1c200-67b0-11e9-9783-ad84894bfe32.png\\\" alt=\\\"스크린샷 2019-04-25 오후 10 55 56\\\">\\n<br/><br/></li>\\n<li>가져온 Client ID, Secret 입력해줍니다.\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56742606-05c1c200-67b0-11e9-8bd1-debc994b9475.png\\\" alt=\\\"스크린샷 2019-04-25 오후 10 58 22\\\">\\n<br/><br/></li>\\n<li>Jenkins configure security 화면에서 아래의 Authorization - Matrix-based security를 선택<br/>\\nAdd user or group으로 <code class=\\\"language-text\\\">GITHUB-ORGANIZATION-NAME</code>를 넣어줍니다.<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56744137-e37d7380-67b2-11e9-9609-696ab3f38edf.png\\\" alt=\\\"스크린샷 2019-04-25 오후 10 59 21\\\">\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56744208-07d95000-67b3-11e9-8d36-622cc0fdba8e.png\\\" alt=\\\"스크린샷 2019-04-25 오후 10 59 32\\\">\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56744210-07d95000-67b3-11e9-8166-1d0f3aa0d12d.png\\\" alt=\\\"스크린샷 2019-04-25 오후 10 59 46\\\">\\n<br/><br/></li>\\n<li>모든권한을 부여합니다.<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56744745-08beb180-67b4-11e9-96ce-e935542220e4.gif\\\" alt=\\\"2225ed0b11fc77c412634d3ba13bb375\\\">\\n<br/><br/></li>\\n<li>save 클릭. 이제 아까 생성한 관리자계정은 github 로 가입한 계정이 아니기때문에 모든 권한을 잃어버립니다.<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56744765-11af8300-67b4-11e9-8c45-1db3416b6c0c.png\\\" alt=\\\"스크린샷 2019-04-25 오후 11 00 34\\\">\\n<br/><br/></li>\\n<li>다시 로그인하면 github 계정에게 authorize 요청 창이 뜨고, 승인하면 로그인이 완료됩니다.<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56744852-3c99d700-67b4-11e9-8735-2d71bdcfbcc5.png\\\" alt=\\\"스크린샷 2019-04-25 오후 11 02 13\\\">\\n<br/><br/></li>\\n<li>주의: github Authorize 주기 전 꼭 해당 Organization 에 대한 열람권한을 Grant 해줘야합니다.<br/>\\n이 과정을 생략하면, 해당 Organization의 멤버인지 확인할 방법이 없기때문에 jenkins는 해당 유저에게 권한을 주지않습니다.<br/>\\n(최초 Jenkins 가입시 Grant 되어있지않으면, 이후에 github settings 에 들어가 Organization 열람권한을 주더라도 Jenkins는 권한을 주지 없습니다.)\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/56744964-68b55800-67b4-11e9-99bb-27db9edf094c.gif\\\" alt=\\\"34f5a7b3e3b206779cff94b7fc977db3\\\">\\n<br/><br/></li>\\n<li>참고: 이 경우 방금 로그아웃한 페이지(<a href=\\\"http://USER-JENKINS-HOST/githubLogout/\\\">http://USER-JENKINS-HOST/githubLogout/</a> )로 리디렉션되기때문에 don’t run away라는 창이 표시됩니다. 메인으로 이동해줍니다.<br/>\\n<br/><br/></li>\\n<li>github authentication 연동 완료.<br/>\\nref: plugin 문서 <a href=\\\"https://wiki.jenkins.io/display/JENKINS/GitHub+OAuth+Plugin\\\">https://wiki.jenkins.io/display/JENKINS/GitHub+OAuth+Plugin</a>\\n<br/><br/></li>\\n</ul>\",\"fields\":{\"slug\":\"/posts/2019-04-25---Jenkins-pipeline-tutorials---2--Install-github-authentication-plugin/\",\"tagSlugs\":[\"/tags/jenkins/\"]},\"frontmatter\":{\"title\":\"Jenkins pipeline tutorials - 2. Install github authentication plugin\",\"tags\":[\"jenkins\"],\"date\":\"2019-04-25T23:53:00+0900\",\"description\":\"github authentication plugin 을 연동합니다.\"}}},\"pathContext\":{\"slug\":\"/posts/2019-04-25---Jenkins-pipeline-tutorials---2--Install-github-authentication-plugin/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-2019-04-25-jenkins-pipeline-tutorials-2-install-github-authentication-plugin.json\n// module id = 417\n// module chunks = 80501578220077"],"sourceRoot":""}