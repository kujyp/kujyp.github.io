<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[kujyp 개발블로그]]></title><description><![CDATA[ML DevOps, Python, Docker ...]]></description><link>https://kujyp.github.io</link><generator>RSS for Node</generator><lastBuildDate>Mon, 13 May 2019 08:17:12 GMT</lastBuildDate><item><title><![CDATA[Jenkins pipeline tutorials - 4. Jenkins Job 생성하기]]></title><description><![CDATA[이제 jenkins job을 생성할차례입니다. pipeline organization job 을 추가합니다.]]></description><link>https://kujyp.github.io/posts/2019-05-06---Jenkins-pipeline-tutorials---4--Jenkins-Job-생성하기/</link><guid isPermaLink="false">https://kujyp.github.io/posts/2019-05-06---Jenkins-pipeline-tutorials---4--Jenkins-Job-생성하기/</guid><pubDate>Mon, 06 May 2019 15:07:00 GMT</pubDate><content:encoded>&lt;h3&gt;개요&lt;/h3&gt;
&lt;p&gt;아래 스펙의 jenkins를 설치하는것을 목적으로 합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jenkins(host container)를 docker image를 사용하여 구동합니다.&lt;/li&gt;
&lt;li&gt;jenkins login을 github auth와 연동합니다.&lt;/li&gt;
&lt;li&gt;UI로 blueocean을 사용합니다.&lt;/li&gt;
&lt;li&gt;Jenkins job item 으로 pipeline job(organization, multi branch) 을 사용합니다.&lt;/li&gt;
&lt;li&gt;Groovy 언어로 작성된 Jenkinsfile 을 사용합니다.&lt;/li&gt;
&lt;li&gt;메일발송으로 emailext plugin를 사용합니다.&lt;/li&gt;
&lt;li&gt;jenkins job을 docker agent를 사용하여 구동합니다.(위의 host container와 구분되는 runner container 입니다)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;목차&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/posts/2019-04-14---Jenkins-pipeline-tutorials---1--Install-Jenkins/&quot;&gt;1. Install Jenkins&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1-1. docker 설치&lt;/li&gt;
&lt;li&gt;1-2. jenkins container 실행&lt;/li&gt;
&lt;li&gt;1-3. jenkins web 접속&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/posts/2019-04-25---Jenkins-pipeline-tutorials---2--Install-github-authentication-plugin/&quot;&gt;2. Install github authentication plugin&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2-1. plugin 설치&lt;/li&gt;
&lt;li&gt;2-2. plugin 설정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/posts/2019-05-01---Jenkins-pipeline-tutorials---3--Webhook-settings/&quot;&gt;3. Webhook settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/posts/2019-05-06---Jenkins-pipeline-tutorials---4--Jenkins-Job-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/&quot;&gt;&lt;strong&gt;4. Jenkins Job 생성하기&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4-1. Pipeline Organization job 생성하기&lt;/li&gt;
&lt;li&gt;4-2. tag automatic trigger 문제&lt;/li&gt;
&lt;li&gt;4-3. tag automatic trigger 문제해결&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(미작성)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;jenkins concurrency
&lt;br/&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;과정&lt;/h2&gt;
&lt;h3&gt;4. Jenkins Job 생성하기&lt;/h3&gt;
&lt;h4&gt;4-1. Pipeline Organization job 생성하기&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;이제 jenkins job을 생성할차례입니다.&lt;/li&gt;
&lt;li&gt;pipeline organization job 을 추가합니다.&lt;br/&gt;
organization 전체를 주기적으로 스캔하고, jenkinsfile이 있는 repository에 자동으로 명시된 task를 수행합니다.&lt;/li&gt;
&lt;li&gt;먼저, 등록할 Organization 에 Owner 권한이 있는 계정이 필요합니다.&lt;br/&gt;
&lt;img width=&quot;893&quot; alt=&quot;&amp;#x1109;&amp;#x1173;&amp;#x110F;&amp;#x1173;&amp;#x1105;&amp;#x1175;&amp;#x11AB;&amp;#x1109;&amp;#x1163;&amp;#x11BA; 2019-05-06 &amp;#x110B;&amp;#x1169;&amp;#x1112;&amp;#x116E; 11 42 05&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57232895-958d2900-7058-11e9-8807-63de3aed212c.png&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;new item &gt; GitHub Organization&lt;br/&gt;
&lt;img width=&quot;913&quot; alt=&quot;&amp;#x1109;&amp;#x1173;&amp;#x110F;&amp;#x1173;&amp;#x1105;&amp;#x1175;&amp;#x11AB;&amp;#x1109;&amp;#x1163;&amp;#x11BA; 2019-05-06 &amp;#x110B;&amp;#x1169;&amp;#x1112;&amp;#x116E; 10 53 22&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57232326-50b4c280-7057-11e9-8ad1-1de77542cccc.png&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Projects &gt; Github Organization &gt; Credentials - username and password 선택&lt;br/&gt;
Behaviors &gt; Add &gt; discovery tags 추가&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57232307-4d213b80-7057-11e9-80b7-778091aa51e7.gif&quot; alt=&quot;681ad0d904675f814e80a97319e5282e&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Orphaned Item Strategy &gt; Discard old items &gt; Days to keep old items&lt;br/&gt;
저장 용량이 부담스러울것 같아 30일을 지정했습니다.(자유)&lt;br/&gt;
&lt;img width=&quot;734&quot; alt=&quot;&amp;#x1109;&amp;#x1173;&amp;#x110F;&amp;#x1173;&amp;#x1105;&amp;#x1175;&amp;#x11AB;&amp;#x1109;&amp;#x1163;&amp;#x11BA; 2019-05-06 &amp;#x110B;&amp;#x1169;&amp;#x1112;&amp;#x116E; 10 56 09&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57232319-4f839580-7057-11e9-8f01-65b45ffc6185.png&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Save 클릭&lt;br/&gt;
&lt;img width=&quot;91&quot; alt=&quot;&amp;#x1109;&amp;#x1173;&amp;#x110F;&amp;#x1173;&amp;#x1105;&amp;#x1175;&amp;#x11AB;&amp;#x1109;&amp;#x1163;&amp;#x11BA; 2019-05-06 &amp;#x110B;&amp;#x1169;&amp;#x1112;&amp;#x116E; 10 56 15&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57232317-4eeaff00-7057-11e9-9247-c453fbacb88a.png&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;이제 Organization에 가보면 hook이 자동으로 생성된것을 확인할수있습니다.&lt;br/&gt;
&lt;a href=&quot;https://github.com/organizations/ORGANIZATION-NAME/settings/hooks&quot;&gt;https://github.com/organizations/ORGANIZATION-NAME/settings/hooks&lt;/a&gt; &lt;br/&gt;
&lt;img width=&quot;871&quot; alt=&quot;&amp;#x1109;&amp;#x1173;&amp;#x110F;&amp;#x1173;&amp;#x1105;&amp;#x1175;&amp;#x11AB;&amp;#x1109;&amp;#x1163;&amp;#x11BA; 2019-05-06 &amp;#x110B;&amp;#x1169;&amp;#x1112;&amp;#x116E; 10 57 19&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57232313-4e526880-7057-11e9-9676-644925229ac0.png&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;미리 Jenkinsfile을 넣어놓았던 repository는 CI job 실행까지 완료했네요.&lt;br/&gt;
&lt;img width=&quot;818&quot; alt=&quot;&amp;#x1109;&amp;#x1173;&amp;#x110F;&amp;#x1173;&amp;#x1105;&amp;#x1175;&amp;#x11AB;&amp;#x1109;&amp;#x1163;&amp;#x11BA; 2019-05-06 &amp;#x110B;&amp;#x1169;&amp;#x1112;&amp;#x116E; 11 04 28&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57232321-4f839580-7057-11e9-8690-c2d5a67bc5c2.png&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;ref: &lt;a href=&quot;https://support.cloudbees.com/hc/en-us/articles/115003015711-GitHub-Webhook-Organization-Folder&quot;&gt;https://support.cloudbees.com/hc/en-us/articles/115003015711-GitHub-Webhook-Organization-Folder&lt;/a&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4-2. tag automatic trigger 문제&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;위의 설정에는 한가지 문제가 있습니다. tag를 push해도 jenkins는 job을 수행하지않습니다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;위의 사항을 테스트해보기위해, Jenkinsfile을 아래와 같이 두고 tag를 push해봅니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;아래 jenkinsfile의 의도는 tag를 push햇을때 &lt;code class=&quot;language-text&quot;&gt;when { tag &amp;#39;*&amp;#39; }&lt;/code&gt; 아래부분을 추가로 수행시키는것입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-groovy&quot;&gt;&lt;code class=&quot;language-groovy&quot;&gt;&lt;span class=&quot;token shebang comment&quot;&gt;#!/usr/bin/env groovy&lt;/span&gt;

pipeline &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    agent &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        docker &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; image &lt;span class=&quot;token string&quot;&gt;&apos;centos/python-36-centos7:1&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    stages &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;printenv&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            steps &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                sh &lt;span class=&quot;token string&quot;&gt;&apos;printenv&apos;&lt;/span&gt;
                sh &lt;span class=&quot;token string&quot;&gt;&apos;python --version&apos;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token function&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;minimal test&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            steps &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                echo &lt;span class=&quot;token string&quot;&gt;&apos;minimal test&apos;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token function&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;full test&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            when &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; anyOf &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; branch &lt;span class=&quot;token string&quot;&gt;&apos;master&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; branch &lt;span class=&quot;token string&quot;&gt;&apos;PR-*&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            steps &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                echo &lt;span class=&quot;token string&quot;&gt;&apos;full test&apos;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token function&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;deploy&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            when &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; tag &lt;span class=&quot;token string&quot;&gt;&apos;*&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            steps &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                echo &lt;span class=&quot;token string&quot;&gt;&apos;deploy&apos;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    post &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        always &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            echo &lt;span class=&quot;token string&quot;&gt;&apos;done...&apos;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        success &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            echo &lt;span class=&quot;token string&quot;&gt;&apos;success&apos;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        failure &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            echo &lt;span class=&quot;token string&quot;&gt;&apos;failure&apos;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;tag push&lt;br/&gt;
&lt;img width=&quot;591&quot; alt=&quot;&amp;#x1109;&amp;#x1173;&amp;#x110F;&amp;#x1173;&amp;#x1105;&amp;#x1175;&amp;#x11AB;&amp;#x1109;&amp;#x1163;&amp;#x11BA; 2019-05-06 &amp;#x110B;&amp;#x1169;&amp;#x1112;&amp;#x116E; 11 17 45&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57232318-4eeaff00-7057-11e9-97f8-acdd40b49c99.png&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;push 결과로 Jenkins 작업이 돌아가지 않습니다.&lt;br/&gt;
&lt;img width=&quot;845&quot; alt=&quot;&amp;#x1109;&amp;#x1173;&amp;#x110F;&amp;#x1173;&amp;#x1105;&amp;#x1175;&amp;#x11AB;&amp;#x1109;&amp;#x1163;&amp;#x11BA; 2019-05-06 &amp;#x110B;&amp;#x1169;&amp;#x1112;&amp;#x116E; 11 18 42&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57232309-4db9d200-7057-11e9-8055-d7e7accc11dc.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;의도대로라면 아래의 캡쳐처럼 tag branch의 job이 돌아가야합니다.&lt;br/&gt;
&lt;img width=&quot;892&quot; alt=&quot;&amp;#x1109;&amp;#x1173;&amp;#x110F;&amp;#x1173;&amp;#x1105;&amp;#x1175;&amp;#x11AB;&amp;#x1109;&amp;#x1163;&amp;#x11BA; 2019-05-06 &amp;#x110B;&amp;#x1169;&amp;#x1112;&amp;#x116E; 11 25 53&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57232381-6d50fa80-7057-11e9-9fce-852aa36a9136.png&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Plugin issue를 찾아보니, tags에 의해 빌드가 일어나지않는것이 의도된 설계라고합니다.&lt;br/&gt;
Ref: &lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-47496?focusedCommentId=317790&amp;#x26;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-317790&quot;&gt;No automatic builds for tags - Pileline: Organization, Multibranch&lt;/a&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57232315-4e526880-7057-11e9-85b5-b998b3c83bad.png&quot; alt=&quot;e82cff68-11b3-11e9-9e8a-0582d238b4e4&quot;&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이는 최초 jenknis 가 오래된 tag를 모두 빌드해버리면서, CI 서버에 부하가 걸리는것을 방지하는 설계입니다.&lt;br/&gt;
이를 해결하기위해서는 build strategy plugin 설정이 필요합니다.&lt;br/&gt;
Ref: &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/GitHub+Branch+Source+Plugin&quot;&gt;https://wiki.jenkins.io/display/JENKINS/GitHub+Branch+Source+Plugin&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4-3. tag automatic trigger 문제해결&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jenkinsci/basic-branch-build-strategies-plugin/blob/master/docs/user.adoc&quot;&gt;basic branch build strategies plugin&lt;/a&gt;을 설치해서 위의 문제를 해결합니다.&lt;/li&gt;
&lt;li&gt;manage jenkins &gt; plugin manager &gt; available &gt; basic branch build strategies 설치&lt;br/&gt;
&lt;img width=&quot;694&quot; alt=&quot;&amp;#x1109;&amp;#x1173;&amp;#x110F;&amp;#x1173;&amp;#x1105;&amp;#x1175;&amp;#x11AB;&amp;#x1109;&amp;#x1163;&amp;#x11BA; 2019-05-06 &amp;#x110B;&amp;#x1169;&amp;#x1112;&amp;#x116E; 11 21 17&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57232328-50b4c280-7057-11e9-94f0-4c25f29a570d.png&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;item &gt; configure &gt; Project를 보면 Build strategies가 새로 생긴걸 확인할 수 있습니다.&lt;br/&gt;
&lt;img width=&quot;690&quot; alt=&quot;&amp;#x1109;&amp;#x1173;&amp;#x110F;&amp;#x1173;&amp;#x1105;&amp;#x1175;&amp;#x11AB;&amp;#x1109;&amp;#x1163;&amp;#x11BA; 2019-05-06 &amp;#x110B;&amp;#x1169;&amp;#x1112;&amp;#x116E; 11 24 14&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57232322-501c2c00-7057-11e9-9de0-e454ff34d376.png&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Change requests(PR을 의미합니다), Tags를 추가합니다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57232316-4eeaff00-7057-11e9-936c-f110560d0bb4.gif&quot; alt=&quot;66f354a89f6c5f134d23b65c03421f49&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;참고: 이때 Tags에서 &lt;code class=&quot;language-text&quot;&gt;ignore tags older than - 7&lt;/code&gt; 옵션은 생성된지 7일이 지난 tag는 최초 tag indexing 단계에서 job을 일으키지 않는다는 옵션입니다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57232329-514d5900-7057-11e9-986a-3a93fe947f2d.png&quot; alt=&quot;ddf72692-11b6-11e9-9512-0c795280cef5&quot;&gt;
Ref: &lt;a href=&quot;https://github.com/jenkinsci/basic-branch-build-strategies-plugin/blob/master/docs/user.adoc&quot;&gt;https://github.com/jenkinsci/basic-branch-build-strategies-plugin/blob/master/docs/user.adoc&lt;/a&gt; &lt;br/&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;이번에는 tag push event가 재대로 jenkins job을 유발하는것을 확인할 수 있습니다.&lt;br/&gt;
&lt;img width=&quot;664&quot; alt=&quot;&amp;#x1109;&amp;#x1173;&amp;#x110F;&amp;#x1173;&amp;#x1105;&amp;#x1175;&amp;#x11AB;&amp;#x1109;&amp;#x1163;&amp;#x11BA; 2019-05-06 &amp;#x110B;&amp;#x1169;&amp;#x1112;&amp;#x116E; 11 25 28&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57232351-5ad6c100-7057-11e9-94bc-d308ca7d044d.png&quot;&gt;
&lt;img width=&quot;892&quot; alt=&quot;&amp;#x1109;&amp;#x1173;&amp;#x110F;&amp;#x1173;&amp;#x1105;&amp;#x1175;&amp;#x11AB;&amp;#x1109;&amp;#x1163;&amp;#x11BA; 2019-05-06 &amp;#x110B;&amp;#x1169;&amp;#x1112;&amp;#x116E; 11 25 53&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57232381-6d50fa80-7057-11e9-9fce-852aa36a9136.png&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;deploy stage 를 실행했습니다.&lt;br/&gt;
&lt;img width=&quot;856&quot; alt=&quot;&amp;#x1109;&amp;#x1173;&amp;#x110F;&amp;#x1173;&amp;#x1105;&amp;#x1175;&amp;#x11AB;&amp;#x1109;&amp;#x1163;&amp;#x11BA; 2019-05-06 &amp;#x110B;&amp;#x1169;&amp;#x1112;&amp;#x116E; 11 26 10&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57232352-5ad6c100-7057-11e9-9e50-4ebb3cce9baf.png&quot;&gt;
&lt;br/&gt;&lt;br/&gt;
&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Jenkins pipeline tutorials - 3. Webhook settings]]></title><description><![CDATA[GitHub 에서 일어나는 push, commit, tag 등의 액션을 Webhook 으로 Jenkins 에서 받아보도록 설정합니다.]]></description><link>https://kujyp.github.io/posts/2019-05-01---Jenkins-pipeline-tutorials---3--Webhook-settings/</link><guid isPermaLink="false">https://kujyp.github.io/posts/2019-05-01---Jenkins-pipeline-tutorials---3--Webhook-settings/</guid><pubDate>Wed, 01 May 2019 13:51:00 GMT</pubDate><content:encoded>&lt;h3&gt;개요&lt;/h3&gt;
&lt;p&gt;아래 스펙의 jenkins를 설치하는것을 목적으로 합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jenkins(host container)를 docker image를 사용하여 구동합니다.&lt;/li&gt;
&lt;li&gt;jenkins login을 github auth와 연동합니다.&lt;/li&gt;
&lt;li&gt;UI로 blueocean을 사용합니다.&lt;/li&gt;
&lt;li&gt;Jenkins job item 으로 pipeline job(organization, multi branch) 을 사용합니다.&lt;/li&gt;
&lt;li&gt;Groovy 언어로 작성된 Jenkinsfile 을 사용합니다.&lt;/li&gt;
&lt;li&gt;메일발송으로 emailext plugin를 사용합니다.&lt;/li&gt;
&lt;li&gt;jenkins job을 docker agent를 사용하여 구동합니다.(위의 host container와 구분되는 runner container 입니다)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;목차&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/posts/2019-04-14---Jenkins-pipeline-tutorials---1--Install-Jenkins/&quot;&gt;1. Install Jenkins&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1-1. docker 설치&lt;/li&gt;
&lt;li&gt;1-2. jenkins container 실행&lt;/li&gt;
&lt;li&gt;1-3. jenkins web 접속&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/posts/2019-04-25---Jenkins-pipeline-tutorials---2--Install-github-authentication-plugin/&quot;&gt;2. Install github authentication plugin&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2-1. plugin 설치&lt;/li&gt;
&lt;li&gt;2-2. plugin 설정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/posts/2019-05-01---Jenkins-pipeline-tutorials---3--Webhook-settings/&quot;&gt;&lt;strong&gt;3. Webhook settings&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/posts/2019-05-06---Jenkins-pipeline-tutorials---4--Jenkins-Job-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/&quot;&gt;4. Jenkins Job 생성하기&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4-1. Pipeline Organization job 생성하기&lt;/li&gt;
&lt;li&gt;4-2. tag automatic trigger 문제&lt;/li&gt;
&lt;li&gt;4-3. tag automatic trigger 문제해결&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(미작성)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;jenkins concurrency
&lt;br/&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;과정&lt;/h2&gt;
&lt;h3&gt;3. Webhook settings&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GitHub 에서 일어나는 push, commit, tag 등의 액션을 Webhook 으로 Jenkins 에서 받아보도록 설정합니다.&lt;/li&gt;
&lt;li&gt;Manage Jenkins &gt; Configure System &gt; GitHub &gt; Add GitHub Server&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57017957-604d9900-6c5c-11e9-9812-e4c9a077457c.gif&quot; alt=&quot;3d942b0696990457e5a931ed8fdafb4c&quot;&gt;&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Name - github (이름은 자유입니다.)&lt;br/&gt;
API URL - &lt;a href=&quot;https://api.github.com&quot;&gt;https://api.github.com&lt;/a&gt; (기본값입니다.)를 입력해줍니다.&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;참고: GitHub Enterprise 의경우 API URL 란에 &lt;br/&gt;
&lt;a href=&quot;https://GITHUB-ENTERPRISE-URL/api/v3&quot;&gt;https://GITHUB-ENTERPRISE-URL/api/v3&lt;/a&gt; 를 입력해줍니다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57018423-75c3c280-6c5e-11e9-8182-59a3d271cc22.png&quot; alt=&quot;스크린샷 2019-05-01 오후 10 06 36&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Credentials에 Add &gt; Jenkins 를 누른 뒤&lt;br/&gt;
GitHub에 접근할 계정, 패스워드, id - github-account 를 입력해줍니다. &lt;br/&gt;
앞으로 진행할 Github Organization, Repository 에서 Owner 권한이 있어야합니다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57018422-75c3c280-6c5e-11e9-99ef-6b78358cb55f.gif&quot; alt=&quot;377fd0b313cf9429c1288c4df0111ee8&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;하지만 여전히 credentials 리스트에는 등록한 계정은 없고 &lt;code class=&quot;language-text&quot;&gt;- none -&lt;/code&gt; 밖에 없습니다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57018421-752b2c00-6c5e-11e9-81ef-753bd8a72191.png&quot; alt=&quot;스크린샷 2019-05-01 오후 10 13 43&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Credentials 에는 여러종류가 있는데, 방금은 &lt;code class=&quot;language-text&quot;&gt;Username with password&lt;/code&gt; 를 등록했고, &lt;br/&gt;
GitHub Server 의 Credentials 는 &lt;code class=&quot;language-text&quot;&gt;secret text&lt;/code&gt; (GitHub Personal Access Token) 종류를 필요로 합니다.&lt;br/&gt;
(방금 등록한 GitHub username, password 은 이 작업말고 다른곳에 쓰일예정입니다.)&lt;br/&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;따라서 이제 &lt;code class=&quot;language-text&quot;&gt;secret text&lt;/code&gt; (GitHub Personal Access Token) 을 등록해줘야 하는데, &lt;br/&gt;
수동으로 &lt;a href=&quot;https://github.com/settings/tokens/new&quot;&gt;https://github.com/settings/tokens/new&lt;/a&gt; 에서 Personal Access Token 을 직접 등록해도 되지만, &lt;br/&gt;
이번 과정에서는 방금 등록한 GitHub username, password 를 이용해서 Personal Access Token 을 자동생성해봅니다.&lt;br/&gt;
참고: &lt;a href=&quot;https://GITHUB-ENTERPRISE-URL/settings/tokens/new&quot;&gt;https://GITHUB-ENTERPRISE-URL/settings/tokens/new&lt;/a&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57018867-ef0fe500-6c5f-11e9-95e6-4ab457264cd6.png&quot; alt=&quot;image&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Advanced…(두개중 아래에있는것) &gt; &lt;br/&gt;
Manage additional GitHub actions &gt; Convert login and password to token 선택 &lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57019163-a0af1600-6c60-11e9-9886-52c701a1488f.gif&quot; alt=&quot;077946d999a9660867eb26f6e3ff72bf&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Credentials - 방금 등록한 계정 선택, Create token credentials 클릭 &lt;br/&gt;
참고: GitHub Enterprise 는 API URL 을 &lt;a href=&quot;https://GITHUB-ENTERPRISE-URL/api/v3&quot;&gt;https://GITHUB-ENTERPRISE-URL/api/v3&lt;/a&gt; 로 변경해줍니다. &lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57019161-a0af1600-6c60-11e9-8542-44b3b42ded8b.gif&quot; alt=&quot;b9e6596277961a189ba9b616f696df73&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;이러면 GitHub 에는 Personal Access Token 이 생성되고, &lt;br/&gt;
그 토큰이 jenkins Credentials 에 &lt;code class=&quot;language-text&quot;&gt;secret text&lt;/code&gt;의 형태로 저장됩니다.&lt;br/&gt;
참고: &lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;https://github.com/settings/tokens&lt;/a&gt; 에서 확인가능합니다.&lt;br/&gt;
GitHub Enterprise: &lt;a href=&quot;https://GITHUB-ENTERPRISE-URL/settings/tokens&quot;&gt;https://GITHUB-ENTERPRISE-URL/settings/tokens&lt;/a&gt; &lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57019511-b709a180-6c61-11e9-8b27-578d5bc9cfcf.png&quot; alt=&quot;image&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;위에 Credentials 로 돌아가면 여전히 &lt;code class=&quot;language-text&quot;&gt;- none -&lt;/code&gt; 밖에 없는데, &lt;br/&gt;
저장후 다시 Manage Jenkins &gt; Configure System 를 들어오면, &lt;br/&gt;
드디어 리스트에 auto generated token 이 등장합니다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57019118-79f0df80-6c60-11e9-9aad-73d2214d65de.png&quot; alt=&quot;image&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Credentials을 고르고, Test connection으로 작동을 확인해줍니다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57019896-b7566c80-6c62-11e9-9048-c87270e15dfe.gif&quot; alt=&quot;fa9191e33bcbf5c33c70b05992328efd&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Save 를 클릭합니다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57020072-36e43b80-6c63-11e9-8d0e-b78c04f23b4c.png&quot; alt=&quot;image&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;이제 Jenkins 는 방금 등록한 Personal Access Token 을 활용해서 &lt;br/&gt;
앞으로 만들 Pipeline Organization, Multibranch job 의 GitHub Organization, Repository 에 webhook을 자동으로 생성합니다.&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Ref: &lt;a href=&quot;https://support.cloudbees.com/hc/en-us/articles/224543927-GitHub-webhook-configuration&quot;&gt;cloudbees - GitHub Integration: Webhooks&lt;/a&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Jenkins pipeline tutorials - 2. Install github authentication plugin]]></title><description><![CDATA[github authentication plugin 을 연동합니다.]]></description><link>https://kujyp.github.io/posts/2019-04-25---Jenkins-pipeline-tutorials---2--Install-github-authentication-plugin/</link><guid isPermaLink="false">https://kujyp.github.io/posts/2019-04-25---Jenkins-pipeline-tutorials---2--Install-github-authentication-plugin/</guid><pubDate>Thu, 25 Apr 2019 14:53:00 GMT</pubDate><content:encoded>&lt;h3&gt;개요&lt;/h3&gt;
&lt;p&gt;아래 스펙의 jenkins를 설치하는것을 목적으로 합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jenkins(host container)를 docker image를 사용하여 구동합니다.&lt;/li&gt;
&lt;li&gt;jenkins login을 github auth와 연동합니다.&lt;/li&gt;
&lt;li&gt;UI로 blueocean을 사용합니다.&lt;/li&gt;
&lt;li&gt;Jenkins job item 으로 pipeline job(organization, multi branch) 을 사용합니다.&lt;/li&gt;
&lt;li&gt;Groovy 언어로 작성된 Jenkinsfile 을 사용합니다.&lt;/li&gt;
&lt;li&gt;메일발송으로 emailext plugin를 사용합니다.&lt;/li&gt;
&lt;li&gt;jenkins job을 docker agent를 사용하여 구동합니다.(위의 host container와 구분되는 runner container 입니다)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;목차&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/posts/2019-04-14---Jenkins-pipeline-tutorials---1--Install-Jenkins/&quot;&gt;1. Install Jenkins&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1-1. docker 설치&lt;/li&gt;
&lt;li&gt;1-2. jenkins container 실행&lt;/li&gt;
&lt;li&gt;1-3. jenkins web 접속&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/posts/2019-04-25---Jenkins-pipeline-tutorials---2--Install-github-authentication-plugin/&quot;&gt;&lt;strong&gt;2. Install github authentication plugin&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2-1. plugin 설치&lt;/li&gt;
&lt;li&gt;2-2. plugin 설정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/posts/2019-05-01---Jenkins-pipeline-tutorials---3--Webhook-settings/&quot;&gt;3. Webhook settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/posts/2019-05-06---Jenkins-pipeline-tutorials---4--Jenkins-Job-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/&quot;&gt;4. Jenkins Job 생성하기&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4-1. Pipeline Organization job 생성하기&lt;/li&gt;
&lt;li&gt;4-2. tag automatic trigger 문제&lt;/li&gt;
&lt;li&gt;4-3. tag automatic trigger 문제해결&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(미작성)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;jenkins concurrency
&lt;br/&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;과정&lt;/h2&gt;
&lt;h3&gt;2. Install github authentication plugin&lt;/h3&gt;
&lt;h4&gt;2-1. plugin 설치&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;아까 입력한 관리자계정으로 접속해줍니다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/56739946-df4d5800-67aa-11e9-901d-acaf9deea301.png&quot; alt=&quot;9627d258-10f3-11e9-8b36-c0524e734271&quot;&gt;&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Manage Jenkins - Manage plugins - available탭 들어갑니다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/56739948-df4d5800-67aa-11e9-924e-7c13b76a4c17.gif&quot; alt=&quot;d4dbc9b4-10f3-11e9-8eea-cd02d396bca7&quot;&gt;&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;github authentication plugin 체크, download now and install after restart를 선택합니다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/56739949-df4d5800-67aa-11e9-85f8-3111d6b7f62d.gif&quot; alt=&quot;0a74cec2-10f4-11e9-82bd-04d9e3da1111&quot;&gt;&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;왜인지모르지만 아래화면에서 멈춰있어서 restart jenkins when installation is complete and no jobs are running 체크했습니다.&lt;br/&gt;
(원래 자동으로 되는데)&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/56739951-dfe5ee80-67aa-11e9-9b99-e510d3bfc706.png&quot; alt=&quot;32c607ce-10f4-11e9-8f11-f63c704a2ebf&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2-2. plugin 설정&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;manage jenkins - configure global security - github authentication plugin 선택합니다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/56742603-05c1c200-67b0-11e9-9676-bc06b4d74f8c.gif&quot; alt=&quot;cc5f1df2-1113-11e9-9829-df19061f64bd&quot;&gt;&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;GitHub Web URI - &lt;a href=&quot;https://github.com&quot;&gt;https://github.com&lt;/a&gt; &lt;br/&gt;
GitHub API URI - &lt;a href=&quot;https://api.github.com&quot;&gt;https://api.github.com&lt;/a&gt; &lt;br/&gt;&lt;/li&gt;
&lt;li&gt;참고: github enterprise 의 경우 아래 내용을 입력해줍니다.&lt;br/&gt;
GitHub Web URI - &lt;a href=&quot;https://GITHUB-ENTERPRISE-URL&quot;&gt;https://GITHUB-ENTERPRISE-URL&lt;/a&gt; &lt;br/&gt;
GitHub API URI - &lt;a href=&quot;https://GITHUB-ENTERPRISE-URL/api/v3&quot;&gt;https://GITHUB-ENTERPRISE-URL/api/v3&lt;/a&gt; &lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/56743369-64d40680-67b1-11e9-9c90-beb763083fac.png&quot; alt=&quot;스크린샷 2019-04-25 오후 11 25 04&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;client id, client secret 는 github 에서 &lt;code class=&quot;language-text&quot;&gt;OAuth app&lt;/code&gt;을 등록한뒤 생성되는 값을 가져와줍니다.&lt;br/&gt;
OAuth 발급링크: &lt;a href=&quot;https://github.com/settings/applications/new&quot;&gt;https://github.com/settings/applications/new&lt;/a&gt; &lt;br/&gt;
참고: github enterprise 의 경우 &lt;a href=&quot;https://GITHUB-ENTERPRISE-URL/settings/applications/new&quot;&gt;https://GITHUB-ENTERPRISE-URL/settings/applications/new&lt;/a&gt; &lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Register a new OAuth application 페이지에서&lt;br/&gt;
homepage url - &lt;a href=&quot;http://USER-JENKINS-HOST/&quot;&gt;http://USER-JENKINS-HOST/&lt;/a&gt; &lt;br/&gt;
Authorization callback URL - &lt;a href=&quot;http://USER-JENKINS-HOST/securityRealm/finishLogin&quot;&gt;http://USER-JENKINS-HOST/securityRealm/finishLogin&lt;/a&gt; &lt;br/&gt;
를 입력, Register application 을 클릭해줍니다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/56742604-05c1c200-67b0-11e9-9de7-d8e2543ad903.png&quot; alt=&quot;스크린샷 2019-04-25 오후 10 52 47&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;OAuth app 이 생성된뒤 뜨는 Client ID, Client Secret 을 jenkins 설정으로 가져옵니다.&lt;br/&gt;
(detail을 위해 logo도 Upload 했습니다…)&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/56742605-05c1c200-67b0-11e9-9783-ad84894bfe32.png&quot; alt=&quot;스크린샷 2019-04-25 오후 10 55 56&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;가져온 Client ID, Secret 입력해줍니다.
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/56742606-05c1c200-67b0-11e9-8bd1-debc994b9475.png&quot; alt=&quot;스크린샷 2019-04-25 오후 10 58 22&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Jenkins configure security 화면에서 아래의 Authorization - Matrix-based security를 선택&lt;br/&gt;
Add user or group으로 &lt;code class=&quot;language-text&quot;&gt;GITHUB-ORGANIZATION-NAME&lt;/code&gt;를 넣어줍니다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/56744137-e37d7380-67b2-11e9-9609-696ab3f38edf.png&quot; alt=&quot;스크린샷 2019-04-25 오후 10 59 21&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/56744208-07d95000-67b3-11e9-8d36-622cc0fdba8e.png&quot; alt=&quot;스크린샷 2019-04-25 오후 10 59 32&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/56744210-07d95000-67b3-11e9-8166-1d0f3aa0d12d.png&quot; alt=&quot;스크린샷 2019-04-25 오후 10 59 46&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;모든권한을 부여합니다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/56744745-08beb180-67b4-11e9-96ce-e935542220e4.gif&quot; alt=&quot;2225ed0b11fc77c412634d3ba13bb375&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;save 클릭. 이제 아까 생성한 관리자계정은 github 로 가입한 계정이 아니기때문에 모든 권한을 잃어버립니다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/56744765-11af8300-67b4-11e9-8c45-1db3416b6c0c.png&quot; alt=&quot;스크린샷 2019-04-25 오후 11 00 34&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;다시 로그인하면 github 계정에게 authorize 요청 창이 뜨고, 승인하면 로그인이 완료됩니다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/56744852-3c99d700-67b4-11e9-8735-2d71bdcfbcc5.png&quot; alt=&quot;스크린샷 2019-04-25 오후 11 02 13&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;주의: github Authorize 주기 전 꼭 해당 Organization 에 대한 열람권한을 Grant 해줘야합니다.&lt;br/&gt;
이 과정을 생략하면, 해당 Organization의 멤버인지 확인할 방법이 없기때문에 jenkins는 해당 유저에게 권한을 주지않습니다.&lt;br/&gt;
(최초 Jenkins 가입시 Grant 되어있지않으면, 이후에 github settings 에 들어가 Organization 열람권한을 주더라도 Jenkins는 권한을 주지 없습니다.)
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/56744964-68b55800-67b4-11e9-99bb-27db9edf094c.gif&quot; alt=&quot;34f5a7b3e3b206779cff94b7fc977db3&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;참고: 이 경우 방금 로그아웃한 페이지(&lt;a href=&quot;http://USER-JENKINS-HOST/githubLogout/&quot;&gt;http://USER-JENKINS-HOST/githubLogout/&lt;/a&gt; )로 리디렉션되기때문에 don’t run away라는 창이 표시됩니다. 메인으로 이동해줍니다.&lt;br/&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;github authentication 연동 완료.&lt;br/&gt;
ref: plugin 문서 &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/GitHub+OAuth+Plugin&quot;&gt;https://wiki.jenkins.io/display/JENKINS/GitHub+OAuth+Plugin&lt;/a&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Jenkins pipeline tutorials - 1. Install Jenkins]]></title><description><![CDATA[아래 스펙의 jenkins를 설치하는것을 목적으로 합니다. jenkins(host container)를 docker image를 사용하여 구동합니다. jenkins login을 github auth와 연동합니다.]]></description><link>https://kujyp.github.io/posts/2019-04-14---Jenkins-pipeline-tutorials---1--Install-Jenkins/</link><guid isPermaLink="false">https://kujyp.github.io/posts/2019-04-14---Jenkins-pipeline-tutorials---1--Install-Jenkins/</guid><pubDate>Sun, 14 Apr 2019 12:15:00 GMT</pubDate><content:encoded>&lt;h3&gt;개요&lt;/h3&gt;
&lt;p&gt;아래 스펙의 jenkins를 설치하는것을 목적으로 합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jenkins(host container)를 docker image를 사용하여 구동합니다.&lt;/li&gt;
&lt;li&gt;jenkins login을 github auth와 연동합니다.&lt;/li&gt;
&lt;li&gt;UI로 blueocean을 사용합니다.&lt;/li&gt;
&lt;li&gt;Jenkins job item 으로 pipeline job(organization, multi branch) 을 사용합니다.&lt;/li&gt;
&lt;li&gt;Groovy 언어로 작성된 Jenkinsfile 을 사용합니다.&lt;/li&gt;
&lt;li&gt;메일발송으로 emailext plugin를 사용합니다.&lt;/li&gt;
&lt;li&gt;jenkins job을 docker agent를 사용하여 구동합니다.(위의 host container와 구분되는 runner container 입니다)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;목차&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/posts/2019-04-14---Jenkins-pipeline-tutorials---1--Install-Jenkins/&quot;&gt;&lt;strong&gt;1. Install Jenkins&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1-1. docker 설치&lt;/li&gt;
&lt;li&gt;1-2. jenkins container 실행&lt;/li&gt;
&lt;li&gt;1-3. jenkins web 접속&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/posts/2019-04-25---Jenkins-pipeline-tutorials---2--Install-github-authentication-plugin/&quot;&gt;2. Install github authentication plugin&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2-1. plugin 설치&lt;/li&gt;
&lt;li&gt;2-2. plugin 설정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/posts/2019-05-01---Jenkins-pipeline-tutorials---3--Webhook-settings/&quot;&gt;3. Webhook settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/posts/2019-05-06---Jenkins-pipeline-tutorials---4--Jenkins-Job-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/&quot;&gt;4. Jenkins Job 생성하기&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4-1. Pipeline Organization job 생성하기&lt;/li&gt;
&lt;li&gt;4-2. tag automatic trigger 문제&lt;/li&gt;
&lt;li&gt;4-3. tag automatic trigger 문제해결&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(미작성)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;jenkins concurrency
&lt;br/&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;과정&lt;/h2&gt;
&lt;h3&gt;1. Install jenkins&lt;/h3&gt;
&lt;h4&gt;1-1. docker 설치&lt;/h4&gt;
&lt;p&gt;가이드는 Centos를 기준으로 작성합니다. Ubuntu나 기타 OS 사용자는 Reference 링크 참조하면 될 것 같습니다.&lt;/p&gt;
&lt;p&gt;제 경우 GPU 가 필요한 job을 돌려야하기 때문에, nvidia-docker 까지 설치합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;yellow&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;\033[0;33m&quot;&lt;/span&gt;
red&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;\033[0;31m&quot;&lt;/span&gt;
nocolor&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;\033[0m&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; command_exists&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;command&lt;/span&gt; -v &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$@&lt;/span&gt;&quot;&lt;/span&gt; 1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; /dev/null 2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;1
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; check_gpu_exists&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    nvidia-smi 1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; /dev/null 2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;1
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;token comment&quot;&gt;### Main&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;id&lt;/span&gt; -u&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt; -ne &lt;span class=&quot;token string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;${red}&lt;/span&gt;[ERROR] install with root privilege.&lt;span class=&quot;token variable&quot;&gt;${nocolor}&lt;/span&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;exit&lt;/span&gt; 1
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Remove legacy docker&lt;/span&gt;
yum remove docker \
    docker-client \
    docker-client-latest \
    docker-common \
    docker-latest \
    docker-latest-logrotate \
    docker-logrotate \
    docker-engine

&lt;span class=&quot;token comment&quot;&gt;# Remove pre-installed docker, nvidia-docker&lt;/span&gt;
yum remove docker -y \
    docker-engine \
    containerd.io \
    docker-ce-cli \
    nvidia-container-runtime

&lt;span class=&quot;token comment&quot;&gt;# Install dependencies&lt;/span&gt;
yum &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -y yum-utils \
    device-mapper-persistent-data \
    lvm2

yum-config-manager \
    --add-repo \
    https://download.docker.com/linux/centos/docker-ce.repo


&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; check_gpu_exists&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
    distribution&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;.&lt;/span&gt; /etc/os-release&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; $ID$VERSION_ID&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; -s -L https://nvidia.github.io/nvidia-docker/&lt;span class=&quot;token variable&quot;&gt;$distribution&lt;/span&gt;/nvidia-docker.repo &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; \
        &lt;span class=&quot;token function&quot;&gt;tee&lt;/span&gt; /etc/yum.repos.d/nvidia-docker.repo

    yum &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -y nvidia-docker2
    &lt;span class=&quot;token function&quot;&gt;sed&lt;/span&gt; -i &lt;span class=&quot;token string&quot;&gt;&apos;2i \    \&quot;default-runtime\&quot;: \&quot;nvidia\&quot;,&apos;&lt;/span&gt; /etc/docker/daemon.json
&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
    yum &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -y docker-ce
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Replace &amp;lt;LINUX_USERNAME&gt; with your username.&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;usermod&lt;/span&gt; -aG docker &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;LINUX_USERNAME&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Start docker service on startup&lt;/span&gt;
systemctl &lt;span class=&quot;token function&quot;&gt;enable&lt;/span&gt; docker.service

systemctl start docker&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;br/&gt;
&lt;ul&gt;
&lt;li&gt;Ref: &lt;a href=&quot;https://docs.docker.com/install/linux/docker-ce/centos/&quot;&gt;https://docs.docker.com/install/linux/docker-ce/centos/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ref: &lt;a href=&quot;https://docs.docker.com/install/linux/docker-ce/ubuntu/&quot;&gt;https://docs.docker.com/install/linux/docker-ce/ubuntu/&lt;/a&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1-2. jenkins container 실행&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;jenkins를 docker container로 구동합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jenkins image는 &lt;code class=&quot;language-text&quot;&gt;jenkinsci/blueocean:1.9.0&lt;/code&gt; 를 사용합니다.&lt;br/&gt;
사용가능한 tag list는 아래링크에서 확인가능합니다.&lt;br/&gt;
&lt;a href=&quot;https://hub.docker.com/r/jenkins/jenkins/tags&quot;&gt;https://hub.docker.com/r/jenkins/jenkins/tags&lt;/a&gt; (official jenkins)&lt;br/&gt;
&lt;a href=&quot;https://hub.docker.com/r/jenkinsci/blueocean/tags&quot;&gt;https://hub.docker.com/r/jenkinsci/blueocean/tags&lt;/a&gt; (official jenkins/blueocean)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;아래의 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;JENKINS_HOME&amp;gt;&lt;/code&gt; 부분을 본인이 jenkins home으로 사용하고싶은 경로로 지정합니다.&lt;br/&gt;
jenkins 는 jenkins home 경로에 Configurations, Installed Jenkins plugins, &lt;br/&gt;
Job 도중 생성되는 files(cloned source codes, build artifacts)를 저장합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;즉 Jenkins docker container 를 삭제, 재생성할때, 위의 경로에 이전에 사용하던 파일이 존재하면, 그 상태 그대로 복구가능합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;docker run -d --restart=always \
    --name jenkins \
    -p 80:8080 \
    -u root \
    -v &amp;lt;JENKINS_HOME&amp;gt;:/var/jenkins_home \
    -v /var/run/docker.sock:/var/run/docker.sock \
    jenkinsci/blueocean:1.9.0&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;br/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;실행후 &lt;code class=&quot;language-text&quot;&gt;docker ps&lt;/code&gt; 로 실행여부 확인해줍니다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585936-a0006480-7529-11e9-8528-026412b5ea05.png&quot; alt=&quot;2-0-dockerps&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;참고: 이때 docker run 옵션에서 &lt;code class=&quot;language-text&quot;&gt;-v /var/run/docker.sock:/var/run/docker.sock&lt;/code&gt; 는 jenkins 내부에서 docker agent를 돌려야하는데, jenkins 이미지는 &lt;a href=&quot;https://github.com/jpetazzo/dind&quot;&gt;docker in docker&lt;/a&gt;가 구현되어있지않아서 내부에 docker container를 생성할수없습니다.&lt;br/&gt;
따라서 외부의 docker를 사용하기위해 docker.sock을 공유해줍니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ref: &lt;a href=&quot;https://jenkins.io/doc/tutorials/build-a-python-app-with-pyinstaller/#run-jenkins-in-docker&quot;&gt;https://jenkins.io/doc/tutorials/build-a-python-app-with-pyinstaller/#run-jenkins-in-docker&lt;/a&gt; &lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;1-3. jenkins web 접속&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;2번과정에서 80포트로 개방한 jenkins web으로 접속합니다.&lt;/li&gt;
&lt;li&gt;Jenkins container 를 띄운 곳의 Web domain or ip 를 브라우저에 입력하여 접속합니다.&lt;/li&gt;
&lt;li&gt;최초 Unlock 진행해야합니다. &lt;code class=&quot;language-text&quot;&gt;docker logs jenkins&lt;/code&gt; 로 로그로 찍혀있는 password 복사, 입력합니다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585944-a1319180-7529-11e9-8adc-2b7a5d7de8de.png&quot; alt=&quot;2-1-unlock_jenkins&quot;&gt;
&lt;br/&gt;&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585938-a098fb00-7529-11e9-8a0d-f3c5737f60e1.png&quot; alt=&quot;2-1-docker_logs_password&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;이어서 나오는메뉴에서 Install suggested 입력합니다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585940-a098fb00-7529-11e9-97dc-bb824ea9e8e3.gif&quot; alt=&quot;2-1-install_suggested&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;admin 계정생성하라고 나오는데, 대충 만들어줍니다. github auth 사용하면 이 계정으로 로그인 불가합니다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585937-a0006480-7529-11e9-960b-5ffcd2a18b6a.png&quot; alt=&quot;2-1-create_admin&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;jenkins URL 입력해줍니다.&lt;/li&gt;
&lt;li&gt;domain 을 사용할 계획이라면, 여기에서 ip address 를 domain 으로 바꿔야합니다.&lt;br/&gt;
제 경우 여기에서 넘어갔다가, 나중에 새로 할당받은 도메인으로 변경하려고 하니 proxy 설정에러가 발생해 재설치가 필요했습니다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585941-a098fb00-7529-11e9-82f0-1c53b0027879.png&quot; alt=&quot;2-1-jenkins_url&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;restart 해줍니다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585942-a1319180-7529-11e9-8c92-dc91e7c04f40.png&quot; alt=&quot;2-1-restart&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;restart 하니 제 경우 계속 저 progress창에서 멈춰있었습니다.&lt;/li&gt;
&lt;li&gt;새로고침하면 다시 뜹니다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585939-a098fb00-7529-11e9-9205-04d51a2a165b.gif&quot; alt=&quot;2-1-hangged_progress&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;로그인창이 나타납니다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585943-a1319180-7529-11e9-83e4-2617337154f4.png&quot; alt=&quot;2-1-signin_after_restart&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;참고1. jenkins web 언어 한글로 나올때.&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;언어가 한글로 나오는경우 메뉴이름이 달라져서 구글링도 힘들어지고 여러모로 불편합니다.&lt;/li&gt;
&lt;li&gt;브라우저 주 언어설정을 English로 변경합니다.&lt;/li&gt;
&lt;li&gt;chrome의경우 settings(cmd+,) - advance - language - english(미국)을 맨 위로 올려주면 됩니다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585945-a1319180-7529-11e9-92a0-3e9e7dfffdbd.gif&quot; alt=&quot;2-2-language&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;참고2. jenkins log&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;jenkins log를 보면서 과정을 진행하면 문제가 생겼을때 상황을 알기 더 용이합니다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;docker logs -f jenkins&lt;/code&gt;로 로그를 무중단으로 볼수있습니다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585946-a1ca2800-7529-11e9-97bd-cf5e38becf5a.gif&quot; alt=&quot;2-3-jenkinslog&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[gatsby starter lumen으로 블로그 생성하기 - 4. Search Engine Optimization - Naver]]></title><description><![CDATA[네이버 검색엔진 Console에서 robots.txt추가, Open Graph meta tag 추가 등의 검색노출을 위한 작업을 진행했다.]]></description><link>https://kujyp.github.io/posts/2019-03-13---gatsby-starter-lumen으로-블로그-생성하기---4--Search-Engine-Optimization---Naver/</link><guid isPermaLink="false">https://kujyp.github.io/posts/2019-03-13---gatsby-starter-lumen으로-블로그-생성하기---4--Search-Engine-Optimization---Naver/</guid><pubDate>Tue, 12 Mar 2019 16:51:00 GMT</pubDate><content:encoded>&lt;h3&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;네이버 검색엔진 Console에서 robots.txt추가, Open Graph meta tag 추가 등의 검색노출을 위한 작업을 진행했다.&lt;/p&gt;
&lt;h3&gt;Naver webmaster tool&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://webmastertool.naver.com/guide/site_check.naver&quot;&gt;https://webmastertool.naver.com/guide/site_check.naver&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;먼저 네이버 웹 마스터 툴을 이용해서 사이트 간단체크를 진행하였다.&lt;br/&gt;
robots.txt, Open Graph tag가 미비한것으로 확인되었고, 추가를 진행했다.
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585949-b4446180-7529-11e9-9338-12c061a84769.png&quot; alt=&quot;naver_console&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;robots.txt 추가&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;/posts/2019-03-12---gatsby-starter-lumen%EC%9C%BC%EB%A1%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0---3-Robot.txt/&quot;&gt;gatsby starter lumen으로 블로그 생성하기 - 3. Robot.txt&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Open Graph tag&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;src/pages/index.jsx&lt;/code&gt; 에서 &lt;Helmet&gt; 태그 내부에 Open Graph 요소를 &lt;meta&gt; tag로 넣었다.
&lt;img width=&quot;898&quot; alt=&quot;opengraph&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57585956-b4dcf800-7529-11e9-9039-bb48cb96534e.png&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;다시 위의 Naver webmaster console 에서 확인하니 Open graph 태그가 재대로 반영된것을 확인가능했다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585952-b4446180-7529-11e9-89b7-6e8f4dd9ca21.png&quot; alt=&quot;naver_tagerror_but_opengraph_changed&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Naver webmaster 사이트추가&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://webmastertool.naver.com/board/main.naver&quot;&gt;https://webmastertool.naver.com/board/main.naver&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;위 링크에서 사이트 추가를 진행하였다.&lt;br/&gt;
&lt;img width=&quot;999&quot; alt=&quot;naver_siteadd&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57585950-b4446180-7529-11e9-80b6-17382883effd.png&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;소유확인하기&lt;/code&gt;를 눌러 인증을 진행했다. HTML 태그를 이용해 넣고, 위의 Open Graph 처럼 태그를 추가했다.&lt;br/&gt;
&lt;img width=&quot;1008&quot; alt=&quot;naver_verify&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57585955-b4dcf800-7529-11e9-9f7a-fe2463cbb967.png&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;이유는 모르겠으나 메타태그를 찾을수 없다고 진행이 되지않았다..&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585953-b4446180-7529-11e9-91b7-874e6af54ab7.png&quot; alt=&quot;naver_tagerror&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;site로 가서 태그가 재대로 적용이 되었는지 한번 더 확인을 해 보았다.&lt;br/&gt;
아래 내용으로 meta 태그가 붙어있는것을 확인가능했다.&lt;br/&gt;
설마 &lt;code class=&quot;language-text&quot;&gt;data-react-helmet=&amp;quot;true&amp;quot;&lt;/code&gt; 때문인가.&lt;br/&gt;
아니겠지 설마 그정도로 단순하게 parsing code를 넣어놓진 않았겠지…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-react-helmet&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;naver-site-verification&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;cd14eb7aa77c570360a07270cab55fbabb276d18&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;img width=&quot;919&quot; alt=&quot;naver_verify_metatag&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57585954-b4dcf800-7529-11e9-9135-1e3570c2ac90.png&quot;&gt;
&lt;br&gt;&lt;br&gt;
&lt;p&gt;일단 이 내용은 스킵하고 Google 쪽을 먼저 진행했다.&lt;br/&gt;
다음글에서 계속…&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;도움을 받았던 링크&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://intiwatana.github.io/FrontEnd/SEO/%EA%B5%AC%EA%B8%80-%EB%84%A4%EC%9D%B4%EB%B2%84-%EA%B2%80%EC%83%89%EB%85%B8%EC%B6%9C-%EC%A6%89%EC%8B%9C%EB%B0%98%EC%98%81/&quot;&gt;구글 네이버 검색노출(SEO) 즉시반영하기 - intiwatana&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[gatsby starter lumen으로 블로그 생성하기 - 3. Robot.txt]]></title><description><![CDATA[gatsby-starter-lumen 으로 만든 블로그에 robots.txt를 추가했다.]]></description><link>https://kujyp.github.io/posts/2019-03-12---gatsby-starter-lumen으로-블로그-생성하기---3--Robot-txt/</link><guid isPermaLink="false">https://kujyp.github.io/posts/2019-03-12---gatsby-starter-lumen으로-블로그-생성하기---3--Robot-txt/</guid><pubDate>Tue, 12 Mar 2019 15:40:00 GMT</pubDate><content:encoded>&lt;h3&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;gatsby-starter-lumen 으로 만든 블로그에 robots.txt를 추가했다. &lt;/p&gt;
&lt;h3&gt;robots.txt 추가&lt;/h3&gt;
&lt;p&gt;robots.txt 같은경우에는 gatsby plugin으로 잘 되어있어서 해당 플러그인을 설치하는것으로 진행하였다.&lt;br/&gt;
gatsby-plugin-robots-txt plugin - &lt;a href=&quot;https://www.gatsbyjs.org/packages/gatsby-plugin-robots-txt&quot;&gt;https://www.gatsbyjs.org/packages/gatsby-plugin-robots-txt&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;yarn add gatsby-plugin-robots-txt
&lt;span class=&quot;token comment&quot;&gt;# gatsby-config.js 수정&lt;/span&gt;
yarn run develop&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;project top level 에서 gatsby-config.js &gt; plugins 에 &lt;code class=&quot;language-text&quot;&gt;&amp;#39;gatsby-plugin-robots-txt&amp;#39;&lt;/code&gt;를 추가해준다.
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585960-c58d6e00-7529-11e9-95cd-166591cf1ac8.png&quot; alt=&quot;robotstxt_config_addplugin&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;음… 역시나 삽질없이 적용되지는 않았다.&lt;br/&gt;
개발모드로 접속해보니 &lt;a href=&quot;http://localhost:8000/robots.txt&quot;&gt;http://localhost:8000/robots.txt&lt;/a&gt; 주소에서 아무것도 돌려주지않는다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585962-c58d6e00-7529-11e9-8790-bd8295356eef.png&quot; alt=&quot;robotstxt_doesnt_exist&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;이것저것 바꿔보아도 생기지않아서 당황했는데, &lt;br/&gt;
결론부터 이야기하면 &lt;code class=&quot;language-text&quot;&gt;yarn run build&lt;/code&gt; 를 수행하고 &lt;code class=&quot;language-text&quot;&gt;yarn run develop&lt;/code&gt;을 수행하면 잘 된다…&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.gatsbyjs.org/packages/gatsby-plugin-robots-txt/#options&quot;&gt;plugin 문서&lt;/a&gt;를 읽어보니 기본값으로 &lt;code class=&quot;language-text&quot;&gt;siteMetadata.siteUrl&lt;/code&gt; 을 참조했는데, &lt;br/&gt;
&lt;a href=&quot;https://github.com/alxshelepenok/gatsby-starter-lumen&quot;&gt;gatsby-lumen-starter&lt;/a&gt; 에는 해당 값이 미리 만들어져있지 않다. 새로 추가해줬다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585961-c58d6e00-7529-11e9-90e0-e12edeca1d16.png&quot; alt=&quot;robotstxt_docs&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585963-c6260480-7529-11e9-8821-0e759a1f8422.png&quot; alt=&quot;robotstxt_gatsby_config&quot;&gt;&lt;/p&gt;
&lt;p&gt;수정사항을 github에 push를 하니, 이전글에서 세팅해놓은 자동배포 과정이 재대로 도는것을 확인할수 있었다.&lt;br/&gt;
이전글 - &lt;a href=&quot;/posts/2019-02-24---gatsby-%EC%A0%95%EC%A0%81%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0---%EC%9E%90%EB%8F%99deploy,-CircleCI%EC%97%B0%EB%8F%99/&quot;&gt;gatsby 정적블로그 생성하기 - 자동deploy, CircleCI연동&lt;/a&gt;&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585959-c58d6e00-7529-11e9-9f76-06cbcdbb79b9.png&quot; alt=&quot;ci_result&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;정식사이트(&lt;a href=&quot;https://kujyp.github.io/robots.txt&quot;&gt;https://kujyp.github.io/robots.txt&lt;/a&gt;)에도 잘 반영되었다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585964-c6260480-7529-11e9-9ce5-8b14ef192706.png&quot; alt=&quot;robotstxt_result&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;끝.&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;참고&lt;/h3&gt;
&lt;p&gt;위에서 진행한 내용은 github 에서 commit내용으로 확인 가능하다.&lt;br/&gt;
&lt;a href=&quot;https://github.com/kujyp/kujyp.github.io/commit/abe64c99dbf10de22c303c5f0d9984d7cae8245d&quot;&gt;https://github.com/kujyp/kujyp.github.io/commit/abe64c99dbf10de22c303c5f0d9984d7cae8245d&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[gatsby 정적블로그 생성하기 - 자동deploy, CircleCI연동]]></title><description><![CDATA[Gatsby 정적블로그에 CircleCI를 활용해서 자동 Deploy 하는 Pipeline을 만들어보았다.]]></description><link>https://kujyp.github.io/posts/2019-02-24---gatsby-정적블로그-생성하기---자동deploy,-CircleCI연동/</link><guid isPermaLink="false">https://kujyp.github.io/posts/2019-02-24---gatsby-정적블로그-생성하기---자동deploy,-CircleCI연동/</guid><pubDate>Sun, 24 Feb 2019 22:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;Gatsby 정적블로그에 CircleCI를 활용해서 자동 Deploy 하는 Pipeline을 만들어보았다.&lt;/p&gt;
&lt;h3&gt;CircleCI 연동&lt;/h3&gt;
&lt;p&gt;지난번에 블로그를 만들면서 생성한 Github Repository에 CircleCI 를 연동해서, deploy 작업을 자동화 시키려고한다. (지난글 - &lt;a href=&quot;https://kujyp.github.io/posts/gatsby-starter-lumen%EC%9C%BC%EB%A1%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/&quot;&gt;gatsby starter lumen으로 블로그 생성하기&lt;/a&gt;)&lt;br/&gt;
CircleCI는 Jenkins, Travis 처럼 CI 툴의 일종으로, Jenkins와 같은 설치형과 다르게 오픈소스에 대해&lt;br/&gt;
무료로 클라우드 자원을 할당해줘서, 본인의 서버가 필요없다는 장점이 있다.(Travis도 마찬가지 장점이 있다.)  &lt;/p&gt;
&lt;p&gt;CircleCI를 연동하는 방법은 간단하다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CircleCI에 Github계정으로 가입.&lt;/li&gt;
&lt;li&gt;CircleCI에서 해당 Github Repository - “Set Up Project”&lt;/li&gt;
&lt;li&gt;Github repository에 .circleci/config.yml 파일 추가
&lt;br/&gt;
&lt;br/&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;1. CircleCI에 Github 계정으로 가입.&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://circleci.com/&quot;&gt;https://circleci.com/&lt;/a&gt; 접속 &gt; 우측 상단 SignUp &gt; Github으로 가입을 진행한다.
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585981-d76f1100-7529-11e9-968a-7eb333e1f8ae.png&quot; alt=&quot;circleci_signup&quot;&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;참고: 로그인 후 콘솔이 뜨지않는 경우 우측 상단의 Go to app 버튼을 클릭한다.
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585978-d6d67a80-7529-11e9-9e13-6d3b3efa0ae1.png&quot; alt=&quot;circleci_gotoapp&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;2. CircleCI에서 해당 Github Repository - “Set Up Project”&lt;/h3&gt;
&lt;p&gt;위에서 뜬 콘솔창에서 좌측 Add Projects 버튼을 클릭 &gt; 해당 Repository 우측의 “Set Up Project” 버튼을 클릭해준다.&lt;br/&gt;
참고: github.io 프로젝트는 이미 진행을 해놔서, 다른 프로젝트로 스크린샷을 찍어왔다.
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585980-d76f1100-7529-11e9-8ab0-ed7048310723.gif&quot; alt=&quot;circleci_setupproject&quot;&gt;&lt;/p&gt;
&lt;p&gt;“Set Up Project” 버튼을 클릭하면 환경을 리스트가 나오는데, React Project이므로 Node를 선택해준다.&lt;br/&gt;
CircleCI를 부착하는 방법에 대해 설명이 나오는데, 맨아래에 보면 sample yaml 파일을 복사해갈수있다. 이를 복사하고 다음 단계로 진행한다.&lt;br/&gt;
드래그해서 복사해도되고, 2번단계에 잇는 “Copy To Clipboard” 버튼을 클릭해도된다.
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585985-d807a780-7529-11e9-936c-d11df2bd00d5.gif&quot; alt=&quot;setupproject_node_samplecopy&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;3. Github repository에 .circleci/config.yml 파일 추가&lt;/h3&gt;
&lt;p&gt;방금 복사한 샘플 yml 내용을하고, Repository의 .circleci/config.yml 에 넣어준다.&lt;br/&gt;
나는 필요없는 부분은 제거하고, 마지막 run 부분을 &lt;code class=&quot;language-text&quot;&gt;yarn run deploy&lt;/code&gt; 로 변경해주었다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kujyp/kujyp.github.io/commit/febd66ce8af272572d0108524899956d706e287b&quot;&gt;https://github.com/kujyp/kujyp.github.io/commit/febd66ce8af272572d0108524899956d706e287b&lt;/a&gt; &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2.0&lt;/span&gt;

&lt;span class=&quot;token key atrule&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; circleci/node&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;9.10.0

    &lt;span class=&quot;token key atrule&quot;&gt;working_directory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ~/app

    &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; checkout

    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;restore_cache&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; v1&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;dependencies&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; checksum &quot;package.json&quot; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; v1&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;dependencies&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;

    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; yarn install

    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;save_cache&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; node_modules
        &lt;span class=&quot;token key atrule&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; v1&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;dependencies&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; checksum &quot;package.json&quot; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; yarn run deploy&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;해당 내용을 Repository에 push 한뒤, 위에서 진행하던 CircleCI 콘솔 5번째 단계인 Start Building 버튼을 눌러준다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585986-d8a03e00-7529-11e9-8198-a9953aa9c5d3.png&quot; alt=&quot;setupproject_startbuilding&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;4. Job failed&lt;/h3&gt;
&lt;p&gt;뭔가 쉽게쉽게 잘 풀리는듯 했으나, 모든 개발이 그러하듯 바로 에러가 나타난다.&lt;/p&gt;
&lt;h4&gt;4-1. git empty name, email&lt;/h4&gt;
&lt;p&gt;CI를 부착하면 github commit 리스트에서 CI 결과 아이콘을 볼수 있는데,&lt;br/&gt;
작업 진행중에는 &lt;code class=&quot;language-text&quot;&gt;노란 동그라미&lt;/code&gt;가 나타나고, 실패하면 &lt;code class=&quot;language-text&quot;&gt;빨간 엑스표시&lt;/code&gt;, 성공하면 &lt;code class=&quot;language-text&quot;&gt;초록 브이표시&lt;/code&gt;가 나타난다.
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585977-d6d67a80-7529-11e9-8600-57f47b01ee1c.png&quot; alt=&quot;circleci_fail&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;엑스표시&lt;/code&gt; 를 눌러서 나온 창에서 Details 링크를 클릭해보면 CircleCI 결과로그를 볼 수 있는데,&lt;br/&gt;
&lt;code class=&quot;language-text&quot;&gt;Please tell me who you are.&lt;/code&gt; 란다.&lt;br/&gt;
&lt;code class=&quot;language-text&quot;&gt;gatsby build --prefix-paths &amp;amp;&amp;amp; gh-pages -d public -b master&lt;/code&gt; 를 진행하면서 git push를 진행하게되는데(build 결과를 &lt;code class=&quot;language-text&quot;&gt;master branch&lt;/code&gt;로 보낸다.)&lt;br/&gt;
push를 할 git 계정, 이메일이 설정되어있지 않다. 로컬이라면 미리 설정해둔 값으로 보냇겠지만 CI 작업이 진행되는 환경은 CircleCI 클라우드 서버에서 진행되므로 완전백지상태이다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585975-d6d67a80-7529-11e9-9715-152411605470.png&quot; alt=&quot;circleci_fail_gitemptyname&quot;&gt;&lt;/p&gt;
&lt;p&gt;다시 &lt;code class=&quot;language-text&quot;&gt;.circleci/config.yml&lt;/code&gt;를 열어서 &lt;code class=&quot;language-text&quot;&gt;yarn run deploy&lt;/code&gt; 를 수행하기 전, &lt;code class=&quot;language-text&quot;&gt;git config&lt;/code&gt; 명령어를 수행해서 username, email을 설정해준다.&lt;br&gt;
&lt;a href=&quot;https://github.com/kujyp/kujyp.github.io/commit/8569e1b2f76ebb7b655e0d23f7ae7513aab8c8ef&quot;&gt;https://github.com/kujyp/kujyp.github.io/commit/8569e1b2f76ebb7b655e0d23f7ae7513aab8c8ef&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;
          git config --global user.email &quot;swe.jaeyoungpark@gmail.com&quot;
          git config --global user.name &quot;kujyp&quot;
          yarn run deploy&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;br/&gt;
&lt;h4&gt;4-2. github read only key&lt;/h4&gt;
&lt;p&gt;위의 에러를 해결하면 이번엔 다른 에러가 뜬다. The key you are authencating with has been marked &lt;strong&gt;as read only.&lt;/strong&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585976-d6d67a80-7529-11e9-9dcb-db2077879172.png&quot; alt=&quot;circleci_fail_readonlykey&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;CircleCI 는 Github에 접근할때 기본값으로 deploy key를 사용한다.&lt;br/&gt;
repository를 clone 해오는데는 문제가 없지만, read only 이기때문에 deploy 과정에서 수행하는 write 작업을 수행할 수 없다.&lt;/p&gt;
&lt;p&gt;참고: deploy key. github 해당 repository settings 메뉴에서 볼 수 있다.
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585983-d807a780-7529-11e9-8dfa-c02c03d98b95.png&quot; alt=&quot;deploykey&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Github write 권한을 주기위해 CircleCI 콘솔에 가서 ssh key를 추가해준다.&lt;br/&gt;
CircleCI Console &gt; Jobs &gt; 프로젝트명 우측 설정 버튼 클릭 &gt; Checkout SSH keys 로 들어간다.&lt;br/&gt;
중간에 “Add user key” 부분이 있는데, &lt;code class=&quot;language-text&quot;&gt;Authorize With Github&lt;/code&gt;를 진행해준다.
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585973-d63de400-7529-11e9-8860-170b014d5758.gif&quot; alt=&quot;circleci_console_checkoutsshkeys&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;이후 &lt;code class=&quot;language-text&quot;&gt;Create and add user key&lt;/code&gt;를 누르면 deploy key 외에 user key가 하나더 생성되고, Preferred가 설정되는것을 볼 수 있다.&lt;br&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585974-d63de400-7529-11e9-8797-a0a49fdd1fb7.gif&quot; alt=&quot;circleci_console_createandadduserkey&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Github에서도 user key(ssh key)가 추가된 것을 확인할 수 있다.&lt;br/&gt;
&lt;a href=&quot;https://github.com/settings/keys&quot;&gt;https://github.com/settings/keys&lt;/a&gt; 에 가보면 &lt;code class=&quot;language-text&quot;&gt;CircleCI: kujyp/kujyp.github.io&lt;/code&gt;가 자동생성 된 것을 볼수있다.
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585984-d807a780-7529-11e9-859a-82c3c237e08d.png&quot; alt=&quot;github_userkey&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h4&gt;4-3. re-run job&lt;/h4&gt;
&lt;p&gt;read only key 문제를 해결하면, ssh key는 config.yml 파일 수정없이 적용된다.&lt;br/&gt;
하지만 CircleCI에 권한이 있는 user key를 추가한다고 해서 작업이 저절로 다시 수행되지는 않는다.&lt;/p&gt;
&lt;p&gt;수동으로 re-run을 시켜하는데, Github에서 아까 실패한 마지막 commit 에 달려있는 링크를 타고 CircleCI 콘솔에 접속한다.&lt;br/&gt;
실패한 작업 옆에 Details link를 클릭하면된다.
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585977-d6d67a80-7529-11e9-8600-57f47b01ee1c.png&quot; alt=&quot;circleci_fail&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;접속한 CircleCI 콘솔에서 우측에 있는 rerun workflow를 클릭해주면, 추가해둔 user key를 이용해서 작업을 다시 수행하게된다.&lt;br/&gt;
참고: 이 짓이 귀찮으면 새 commit을 제출해도 새로 작업이 수행된다.
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585979-d76f1100-7529-11e9-8f65-129fae6cd6d9.gif&quot; alt=&quot;circleci_rerunjob&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;추가로 수행한 작업은 결국 성공했다. 그런데 따로 작업이 기록되어서 github commit 옆에는 여전히 X 표시가 남아있다.
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585982-d76f1100-7529-11e9-861b-971b087ee9e4.png&quot; alt=&quot;circleci_workflow_success&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;5. Post 등록&lt;/h3&gt;
&lt;p&gt;자동 deploy 작업을 추가했으니, 글을 등록해서 작업이 잘 되는지 테스트해본다.&lt;br/&gt;
새로 글을 하나 작성하고 github development branch에 push 를 수행했다.&lt;/p&gt;
&lt;p&gt;Github에 작업이 성공한것으로 아이콘이 변했다.
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585969-d5a54d80-7529-11e9-9975-e409ea1f9f78.png&quot; alt=&quot;autodeploy_result1&quot;&gt;
&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585970-d63de400-7529-11e9-97b3-0e5206d4059b.png&quot; alt=&quot;autodeploy_result2&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;실제 블로그에도 정상적으로 반영이 되는것을 확인 할 수 있었다.
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585971-d63de400-7529-11e9-8c4e-f61e6c47ab76.png&quot; alt=&quot;autodeploy_result3&quot;&gt;&lt;/p&gt;
&lt;p&gt;끝.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[PyCharm toggle case]]></title><description><![CDATA[PyCharm toggle case 기능 소개]]></description><link>https://kujyp.github.io/posts/2019-02-23---Pycharm-Toggle-case/</link><guid isPermaLink="false">https://kujyp.github.io/posts/2019-02-23---Pycharm-Toggle-case/</guid><pubDate>Sat, 23 Feb 2019 02:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;PyCharm toggle case 기능 소개 &lt;/p&gt;
&lt;h4&gt;Pycharm toggle case&lt;/h4&gt;
&lt;p&gt;우리팀은 vim을 사용하는 분들이 많다. 그 중 한분이 vim으로 화려한 작업들을 많이하시는데, &lt;br/&gt;
어제 작업 하시는걸 구경했었는데, 대문자로 지어진 변수명을 뭔가 키 몇개 누르고 소문자로 확 바꿔버리셨다.&lt;br/&gt;
뭔가 신박해서 내가 사용하고있는 pycharm은 그런기능이 없나 찾아보았다.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;퀵액션기능으로(&lt;code class=&quot;language-text&quot;&gt;cmd+shift+A&lt;/code&gt;, 단어로 기능을 찾을때 유용하다) 찾아보니, 역시 갓브레인… &lt;code class=&quot;language-text&quot;&gt;Toggle Case&lt;/code&gt; 라는 기능이 있었다.
&lt;img width=&quot;1014&quot; alt=&quot;quickaction_case&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57585991-e8b81d80-7529-11e9-9eaf-337eb6dfd7ae.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;cmd+shift+U&lt;/code&gt;를 입력하니 전환이 잘 되는것을 확인할 수 있었다.
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585992-e8b81d80-7529-11e9-8492-1120d5fffa19.gif&quot; alt=&quot;toggle_case&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Jenkins Extended E-mail Notification plugin에서 비어있는 환경변수 처리]]></title><description><![CDATA[Jenkins Extended E-mail Notification plugin을 사용하여 email 알림을 보낸다.]]></description><link>https://kujyp.github.io/posts/2019-02-23---Jenkins-Extended-E-mail-Notification-plugin에서-비어있는-환경변수-처리/</link><guid isPermaLink="false">https://kujyp.github.io/posts/2019-02-23---Jenkins-Extended-E-mail-Notification-plugin에서-비어있는-환경변수-처리/</guid><pubDate>Sat, 23 Feb 2019 01:49:00 GMT</pubDate><content:encoded>&lt;h3&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;Jenkins Extended E-mail Notification plugin을 사용하여 email 알림을 보낼때 비어있는 환경변수를 처리한다. &lt;/p&gt;
&lt;h4&gt;Email-ext plugin&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Email-ext+plugin&quot;&gt;Email-ext plugin&lt;/a&gt; 은 Jenkins에서 작업 완료 알림을 이메일로 받아 볼 수 있도록 해준다.&lt;/p&gt;
&lt;p&gt;나는 사내 Repository에서 Jenkins pipeline 중 post block을 아래의 내용으로 채우고있다.&lt;br/&gt;
tag나 Pull Request로 유발된 작업이거나, master branch 인 경우, 작업이 끝났을때 알림 이메일을 보낸다는 내용이다.&lt;br/&gt; &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-groovy&quot;&gt;&lt;code class=&quot;language-groovy&quot;&gt;post &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    always &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// recipientProviders document: https://jenkins.io/doc/pipeline/steps/email-ext/&lt;/span&gt;
        script &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;env&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;BRANCH_NAME &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;master&quot;&lt;/span&gt;
                    &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; env&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;BRANCH_NAME&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;PR&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; env&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;TAG_NAME&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; committerEmail &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sh &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
                    script&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;git --no-pager show -s --format=\&apos;%ae\&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                    returnStdout&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

                &lt;span class=&quot;token function&quot;&gt;emailext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
                  subject&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;$DEFAULT_SUBJECT&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                  body&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &apos;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;DEFAULT_CONTENT\n\
\n\
This email triggered by &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;PR&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tag&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; master branch&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; only&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;\n\
&apos;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                  to&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; committerEmail&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                  recipientProviders&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;DevelopersRecipientProvider&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;RequesterRecipientProvider&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;CulpritsRecipientProvider&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
                  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token function&quot;&gt;deleteDir&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        echo &lt;span class=&quot;token string&quot;&gt;&apos;done&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Email-ext plugin을 사용하면, &lt;code class=&quot;language-text&quot;&gt;Default Subject&lt;/code&gt;(제목)이 &lt;code class=&quot;language-text&quot;&gt;$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!&lt;/code&gt; 로 세팅되어있다.&lt;br/&gt;
&lt;code class=&quot;language-text&quot;&gt;Manage Jenkins &amp;gt; Configure System &amp;gt; Extended E-mail Notification &amp;gt; Defalt Subject, Default Content&lt;/code&gt; 에서 변경이 가능한데,&lt;br/&gt;
Pull Request를 하는경우 어떤 PR에서 날라온 결과인지 구분하기위해 제목에 PR이름을 추가했다.&lt;br/&gt;
Jenkins에서는 이를 &lt;code class=&quot;language-text&quot;&gt;$CHANGE_TITLE&lt;/code&gt; 로 제공한다.&lt;br/&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$PROJECT_NAME&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$CHANGE_TITLE&lt;/span&gt; - Build &lt;span class=&quot;token comment&quot;&gt;# $BUILD_NUMBER - $BUILD_STATUS!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585996-f2da1c00-7529-11e9-9262-6155f73d8880.png&quot; alt=&quot;before_setting&quot;&gt;&lt;/p&gt;
&lt;p&gt;그런데 이것이 일반 브랜치(master, tag로 trigger되는경우)에서는 PR제목이 존재하지않아서, &lt;code class=&quot;language-text&quot;&gt;$CHANGE_TITLE&lt;/code&gt; 에 넣을 값이 존재하지 않는 경우가 생긴다.&lt;br/&gt;
이 경우 Email-ext plugin은 이메일에 &lt;code class=&quot;language-text&quot;&gt;$CHANGE_TITLE&lt;/code&gt; 문자를 그대로 발송한다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585998-f372b280-7529-11e9-80d1-71f19b858657.png&quot; alt=&quot;prev_example&quot;&gt;&lt;/p&gt;
&lt;p&gt;이를 개선하려고 찾아보니 환경변수를 &lt;code class=&quot;language-text&quot;&gt;${ENV, var=&amp;quot;VARIABLE_NAME&amp;quot;}&lt;/code&gt;로 가져올수 있어서, 이 포맷를 적용했다.&lt;br/&gt;
Shell 환경변수는 가져올때 해당변수가 할당이 안되어있는경우 공백(&quot;&quot;)을 제공하므로 위의 문제를 해결할 수 있다.&lt;br/&gt;&lt;br&gt;
&lt;img width=&quot;1515&quot; alt=&quot;env_setting&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57585997-f2da1c00-7529-11e9-9345-40c43b0411c5.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;아래는 참고했었던, 문서 위치.&lt;br/&gt;
&lt;code class=&quot;language-text&quot;&gt;Manage Jenkins &amp;gt; Configure System &amp;gt; Extended E-mail Notification&lt;/code&gt; 섹션에서, &lt;code class=&quot;language-text&quot;&gt;Content Reference&lt;/code&gt; 오른쪽의 물음표(?)를 클릭하면 볼수있다.&lt;br&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585999-f372b280-7529-11e9-8b7f-eab0d5c53fe1.gif&quot; alt=&quot;reference_gif&quot;&gt;&lt;/li&gt;
&lt;li&gt;${ENV, var=“VARIABLENAME”}
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57586000-f372b280-7529-11e9-8928-0183a6551fb9.png&quot; alt=&quot;reference&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[get docker 스크립트 파헤치기(command_exists)]]></title><description><![CDATA[평소에 인용해 사용하던 get-docker.sh 내부의 command_exists 함수의 동작을 파헤쳐보았다.]]></description><link>https://kujyp.github.io/posts/get-docker-스크립트-파헤치기-command-exists/</link><guid isPermaLink="false">https://kujyp.github.io/posts/get-docker-스크립트-파헤치기-command-exists/</guid><pubDate>Tue, 15 Jan 2019 17:06:00 GMT</pubDate><content:encoded>&lt;h1&gt;TL;DR&lt;/h1&gt;
&lt;p&gt;평소에 인용해 사용하던 &lt;a href=&quot;https://get.docker.com/&quot;&gt;get-docker.sh&lt;/a&gt; 내부의 command_exists 함수의 동작을 파헤쳐보았다. &lt;/p&gt;
&lt;h1&gt;들어가며&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://get.docker.com/&quot;&gt;get-docker.sh&lt;/a&gt; 는 &lt;a href=&quot;https://bootstrap.pypa.io/get-pip.py&quot;&gt;get-pip.py&lt;/a&gt; 처럼 널리 사용되는 설치 스크립트이다.
어느 os, 어느 cpu architecture에서도 잘 돌아가는 설치스크립트는 꽤나 잘만들어져있다는 느낌을 준다.
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;get-docker.sh 코드 내부에 있는 &lt;code class=&quot;language-text&quot;&gt;command_exists&lt;/code&gt; 함수는 쉘스크립트가 보통은 갖기힘든 아름다운 가독성을 보여준다.
사용예는 이렇다.&lt;br/&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; command_exists &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; exists
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; command_exists &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; not exists
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;이번 글에서는 이 &lt;code class=&quot;language-text&quot;&gt;command_exists&lt;/code&gt; 함수 내부의 내용을 파헤쳐보겠다. &lt;/p&gt;
&lt;h1&gt;command_exists 함수&lt;/h1&gt;
&lt;p&gt;브라우저로 &lt;a href=&quot;https://get.docker.com/&quot;&gt;https://get.docker.com/&lt;/a&gt; 에 접속해보자.&lt;br/&gt;
shebang line &lt;code class=&quot;language-text&quot;&gt;#!/bin/sh&lt;/code&gt; 로 시작하는 쉘 스크립트의 내용을 볼 수 있는데, 이것이 &lt;code class=&quot;language-text&quot;&gt;get-docker.sh&lt;/code&gt;의 코드 내용이다.
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;내용 중 아래로 내려가다보면 &lt;code class=&quot;language-text&quot;&gt;command_exists&lt;/code&gt; 라는 함수가 보일것이다. 3줄짜리 간단한 코드이고, 오늘 파헤쳐볼 코드이다.&lt;br/&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585833-70049180-7528-11e9-8753-cdbbfb1fc83f.png&quot; alt=&quot;command_exists&quot;&gt;&lt;/p&gt;
&lt;h1&gt;command -v&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;command -v &amp;quot;$@&amp;quot;&lt;/code&gt; 부터 알아보자.&lt;br/&gt;
아래는 command manual 중 &lt;code class=&quot;language-text&quot;&gt;-v&lt;/code&gt; 옵션의 내용이다.
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585837-709d2800-7528-11e9-98a4-d99e372dd53b.png&quot; alt=&quot;man_command&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;-v&lt;/code&gt; 뒤의 내용을 &lt;code class=&quot;language-text&quot;&gt;re-read&lt;/code&gt; 되는 내용으로 변경해준다. python 으로 예를들면 이런식이다.&lt;br/&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;command&lt;/span&gt; -v python
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; /usr/bin/python&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;뒤의 내용이 실제로 실행할 파일이 있을때 결과가 출력된다.&lt;br/&gt;
없을때에는? 아무것도 출력되지않는다.
&lt;img src=&quot;https://user-images.githubusercontent.com/19223089/57585834-70049180-7528-11e9-8945-f344ccd4417c.png&quot; alt=&quot;command_v_nothing&quot;&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;즉 command 가 존재하는지 여부를 판단할때 아래와 같은 쉘 조건문을 많이 사용한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;command&lt;/span&gt; -v nothing&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# early exit&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Install nothing first&quot;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;exit&lt;/span&gt; 1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# do something &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h1&gt;”@#”&lt;/h1&gt;
&lt;p&gt;그렇다면 &lt;code class=&quot;language-text&quot;&gt;command -v&lt;/code&gt; 뒤의 ”$@“는 무슨내용일까?&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;함수 또는 스크립트에 들어온 모든 parameter를 의미한다.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;아래의 예시에서 helloworld function에 들어온 $@는 각각 &quot;&quot;, “a”, “a b” 이다.&lt;br/&gt;
참고: macos와 linux의 shell 동작이 다를 수 있어서 예시는 docker centos7 image에서 실행했다.   &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run -it --rm centos:centos7 /bin/bash

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; helloworld&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;helloworld &lt;span class=&quot;token variable&quot;&gt;$@&lt;/span&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;### MAIN ###&lt;/span&gt;
helloworld
helloworld a
helloworld a b

&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; helloworld
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; helloworld a
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; helloworld a b&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;ref: &lt;a href=&quot;https://stackoverflow.com/a/9994328&quot;&gt;What does $@ mean in a shell script?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;/dev/null(널장치)&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;command -v &amp;quot;$@&amp;quot; &amp;gt; /dev/null 2&amp;gt;&amp;amp;1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;먼저 &lt;code class=&quot;language-text&quot;&gt;/dev/null&lt;/code&gt; 앞의 &lt;code class=&quot;language-text&quot;&gt;&amp;gt;&lt;/code&gt;는 표준입력(stdout)을 redirection 한다는 것을 의미한다.&lt;br/&gt;
표준입력을 &lt;code class=&quot;language-text&quot;&gt;/dev/null&lt;/code&gt; 로 redirection 한다는 의미인데, 여기에서 &lt;code class=&quot;language-text&quot;&gt;/dev/null&lt;/code&gt; 로 보낸다는의미는 버린다는 의미와 같다.&lt;br/&gt;
즉 stdout으로 출력될 문구를 출력하지 말라는 의미이다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%84%90_%EC%9E%A5%EC%B9%98&quot;&gt;wikipedia 널 장치&lt;/a&gt;에 따르면 유닉스 쪽에서 &lt;code class=&quot;language-text&quot;&gt;/dev/null&lt;/code&gt; 은 비트 버킷 또는 블랙홀로 불린다고한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ref: wikipedia 널 장치 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%84%90_%EC%9E%A5%EC%B9%98&quot;&gt;https://ko.wikipedia.org/wiki/%EB%84%90_%EC%9E%A5%EC%B9%98&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;file descriptor 1, 2&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;command -v &amp;quot;$@&amp;quot; &amp;gt; /dev/null 2&amp;gt;&amp;amp;1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;/dev/null&lt;/code&gt; 바로 뒤 &lt;code class=&quot;language-text&quot;&gt;2&lt;/code&gt; 에 주목하자 이는 file descriptor를 의미한다.&lt;br/&gt;
여기서 &lt;code class=&quot;language-text&quot;&gt;file descriptor 1&lt;/code&gt; 은 &lt;code class=&quot;language-text&quot;&gt;stdout&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;file descriptor 2&lt;/code&gt; 는 &lt;code class=&quot;language-text&quot;&gt;stderr&lt;/code&gt; 를 의미한다.&lt;br/&gt;
아래의 예시를 보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run -it --rm centos:centos7 /bin/bash

&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; file_that_exists
&lt;span class=&quot;token comment&quot;&gt;# stdout을 버린다.&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; file_that_exists 1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; /dev/null
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; file_that_doesnt_exist 1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; /dev/null
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; ls: cannot access file_that_doesnt_exist: No such &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; or directory

&lt;span class=&quot;token comment&quot;&gt;# stderr를 버린다.&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; file_that_exists 2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; /dev/null
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; file_that_exists
&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; file_that_doesnt_exist 2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; /dev/null
&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;-&gt; ls 명령어의 출력이 비슷해보이지만 &lt;code class=&quot;language-text&quot;&gt;stdout&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;stderr&lt;/code&gt;가 나뉘어져있었다.
&lt;img src=&quot;%22https://user-images.githubusercontent.com/19223089/57585836-709d2800-7528-11e9-9080-0244c7fdadb4.png%22&quot; alt=&quot;ls_output&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ref: &lt;a href=&quot;https://stackoverflow.com/a/818284&quot;&gt;In the shell, what does “ 2&gt;&amp;#x26;1 ” mean?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;2&gt;&amp;#x26;1&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;command -v &amp;quot;$@&amp;quot; &amp;gt; /dev/null 2&amp;gt;&amp;amp;1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;다음은 &lt;code class=&quot;language-text&quot;&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; 차례이다.&lt;br/&gt;
&lt;code class=&quot;language-text&quot;&gt;&amp;amp;&lt;/code&gt; 기호는 뒤의 내용이 &lt;code class=&quot;language-text&quot;&gt;file descriptor&lt;/code&gt; 라는 것을 보여준다.&lt;br/&gt;
즉 &lt;code class=&quot;language-text&quot;&gt;&amp;amp;1&lt;/code&gt; 은 &lt;code class=&quot;language-text&quot;&gt;stdout&lt;/code&gt; 을 의미한다.&lt;br/&gt;
(&amp;#x26;가 없으면 &lt;code class=&quot;language-text&quot;&gt;1&lt;/code&gt; 을 파일이름으로 하는 파일에 해당 내용이 redirection 된다.)&lt;/p&gt;
&lt;p&gt;즉 이 코드는 앞에서 &lt;code class=&quot;language-text&quot;&gt;/dev/null&lt;/code&gt; 로 보냈던 &lt;code class=&quot;language-text&quot;&gt;stdout&lt;/code&gt;에 &lt;code class=&quot;language-text&quot;&gt;stderr&lt;/code&gt;를 연결해서 &lt;code class=&quot;language-text&quot;&gt;stderr&lt;/code&gt;까지 둘다 버리는것을 의미한다.&lt;/p&gt;
&lt;p&gt;아래의 예시를 실행해보면 더 명확하게 알수있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run -it --rm centos:centos7 /bin/bash
 
&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; file_that_exists

&lt;span class=&quot;token comment&quot;&gt;# stderr는 버려지지않는다.&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; file_that_doesnt_exist &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; /dev/null
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; ls: cannot access file_that_doesnt_exist: No such &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; or directory
&lt;span class=&quot;token comment&quot;&gt;# stderr도 버려서 아무것도 출력되지않는다. &lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; file_that_doesnt_exist &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; /dev/null 2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;1
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# stderr를 파일 &quot;1&quot;에 redirection, 아무것도 출력은 안된다.&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; file_that_doesnt_exist &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; /dev/null 2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;1
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# cat으로 file &quot;1&quot;을 출력해보면 내용이 남아있다. &lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; 1
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; ls: cannot access file_that_doesnt_exist: No such &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; or directory&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;참고: &lt;code class=&quot;language-text&quot;&gt;2&amp;gt;1&lt;/code&gt;을 하는 상황에서 &lt;code class=&quot;language-text&quot;&gt;ls&lt;/code&gt; 를 입력해보면, &lt;code class=&quot;language-text&quot;&gt;1&lt;/code&gt; 이라는 파일이 생성된것을 볼 수 있다.
&lt;img width=&quot;656&quot; alt=&quot;ls_file1&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57585835-70049180-7528-11e9-9431-5baf1fe8aabd.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ref: &lt;a href=&quot;https://stackoverflow.com/a/818284&quot;&gt;In the shell, what does “ 2&gt;&amp;#x26;1 ” mean?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ref2: &lt;a href=&quot;https://unix.stackexchange.com/a/23966&quot;&gt;Why is redirecting STDERR to /dev/null done this way?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ref3: &lt;a href=&quot;https://gist.github.com/gin1314/3697341&quot;&gt;gist - bash: redirection cheetsheet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;shell if&lt;/h1&gt;
&lt;p&gt;위에서 설명한 function은 실제로 if 문 내부에서 써먹는다.&lt;br/&gt;
if 문 내부에서 shell statement가 성공, 실패했을때 동작을 살펴보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run -it --rm centos:centos7 /bin/bash
 
&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; file_that_exists

&lt;span class=&quot;token comment&quot;&gt;# shell statement 성공시&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; file_that_exists
&lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; file_that_exists
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# shell statement 실패시&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; file_that_doesnt_exist
&lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; ls: cannot access file_that_doesnt_exist: No such &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; or directory
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;-&gt; if 뒤에 나오는 statement가 성공시 true, 실패시 false를 반환하는것을 알 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;참고: function에 해당 구문을 넣어보았다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run -it --rm centos:centos7 /bin/bash

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; file_exists&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$@&lt;/span&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; file_that_exists
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; file_exists file_that_exists
&lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; file_that_exists
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; file_exists file_that_doesnt_exist
&lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; ls: cannot access file_that_doesnt_exist: No such &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; or directory
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;-&gt; function 으로 감싸도 결과는 같다.&lt;/p&gt;
&lt;h1&gt;결론&lt;/h1&gt;
&lt;p&gt;위에서 알아낸 내용을 종합하면 이 &lt;code class=&quot;language-text&quot;&gt;command_exists&lt;/code&gt; 함수는 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;command -v &amp;quot;인자&amp;quot;&lt;/code&gt; 의 성공/실패여부를 반환하고,&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;stdout&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;stderr&lt;/code&gt;로 나와야할 출력을 &lt;code class=&quot;language-text&quot;&gt;/dev/null&lt;/code&gt; 로 버려주는 역할을 수행한다.
&lt;br/&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;command_exists&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;command&lt;/span&gt; -v &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$@&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; /dev/null 2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;1
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;이 함수를 통해 아래와 같이 사용해왔던 if 문을 좀더 미려하게 사용할 수 있게 만들었다.   &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# before&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;command&lt;/span&gt; -v somethingtocheck&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;command&lt;/span&gt; not exists&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# after&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; command_exists somethingtocheck&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;command&lt;/span&gt; not exists&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h1&gt;마치며&lt;/h1&gt;
&lt;p&gt;shell script는 정식으로 배울일이 없어서 예전부터 구글링하면서 작성을 해왔다.&lt;br/&gt;
눈앞의 문제를 해결하기위해서만 코드 작성을 하다보면, 궁금한점이 자꾸 쌓이는데, 이번 기회에 여러가지 실험해보면서 정리를 해볼 수 있었다.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;꽤 개운한 경험인것 같다.&lt;/p&gt;
&lt;h1&gt;참고&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;참고1. 위에서 사용한 스크립트를 좀더 개선해보았다.&lt;br/&gt;
가독성 측면에서 기존의 &lt;code class=&quot;language-text&quot;&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; 는 좀 더 의도가 숨겨져있는 느낌이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run -it --rm centos:centos7 /bin/bash

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; file_exists&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$@&lt;/span&gt;&quot;&lt;/span&gt; 1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; /dev/null 2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; dev/null
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; file_that_exists
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; file_exists file_that_exists&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; file_exists file_that_doesnt_exist&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;참고2. 중간에 띄어쓰기 때문에 작동안한 시행착오가있었다. 1, 2뒤에는 공백이 들어가면 안되는듯하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ls &amp;quot;$@&amp;quot; &amp;gt; /dev/null 2&amp;gt; dev/null&lt;/code&gt; (작동함)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ls &amp;quot;$@&amp;quot; &amp;gt; /dev/null 2 &amp;gt; dev/null&lt;/code&gt; (작동안함)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;참고3. shell은 공식 document를 어디서 찾아야하는지 몰라서 reference를 stackoverflow에서 가져왔다.&lt;/li&gt;
&lt;li&gt;참고4. shebang line을 보니 get-docker.sh 는 &lt;code class=&quot;language-text&quot;&gt;sh&lt;/code&gt;를 사용한다. shell script를 작성하다보면 가끔 &lt;code class=&quot;language-text&quot;&gt;bash&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;sh&lt;/code&gt;의 차이에서 가끔 막히는경우가 있는데, 이번 글에서는 겪지 못한것을 보니 이번 글에서 사용한 기법들은 차이가 없나보다. &lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[gatsby starter lumen으로 블로그 생성하기]]></title><description><![CDATA[React를 사용하는 정적 페이지 생성 툴 gatsby를 활용해 개발블로그를 만들어 보았다. lumen starter를 활용해 css, plugin가 미리 세팅된 환경에서 작업을 시작했고, github pages를 이용해 생성된 정적페이지를 호스팅했다.]]></description><link>https://kujyp.github.io/posts/gatsby-starter-lumen으로-블로그-생성하기/</link><guid isPermaLink="false">https://kujyp.github.io/posts/gatsby-starter-lumen으로-블로그-생성하기/</guid><pubDate>Thu, 03 Jan 2019 04:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;React를 사용하는 정적 페이지 생성 툴 &lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;gatsby&lt;/a&gt;를 활용해 개발블로그를 만들어 보았다.
&lt;a href=&quot;https://github.com/alxshelepenok/gatsby-starter-lumen&quot;&gt;lumen starter&lt;/a&gt;를 활용해 css, plugin가 미리 세팅된 환경에서 작업을 시작했고,
github pages를 이용해 생성된 정적페이지를 호스팅했다.&lt;/p&gt;
&lt;h3&gt;들어가며&lt;/h3&gt;
&lt;p&gt;2019년을 맞이해서 2018년 회고도 할겸, 미루기만 해왔던 개발블로그를 제작을 해보았다.
개발을 쭉 해오면서 정리해놓은 자료들이 아깝기도하고, 이대로 고생했던 경험을 잊어버릴까봐 걱정되는 마음이 있어서 언젠가는 개발블로그를 만들어보자는 생각을 갖고있었다.
그 과정에서 겪은 내용들을 개발블로그 첫 포스팅으로 올려본다.&lt;/p&gt;
&lt;h3&gt;블로그 서비스 선택&lt;/h3&gt;
&lt;p&gt;제일 먼저 고려했던것은 &lt;code class=&quot;language-text&quot;&gt;직접 개발하기&lt;/code&gt; 였다.
욕심이 많아서 중간중간에 블로그에 넣고싶은 기능들이 계속 생겨날텐데, 그것을 감당하려면 아무래도 직접개발이 가장 좋지 않나 생각했다.&lt;/p&gt;
&lt;p&gt;하지만 올해 6월 해커톤에서 만들었던 &lt;a href=&quot;https://github.com/OrangeTen/TodayILearned&quot;&gt;tilup&lt;/a&gt; 서비스를 유지하는 과정에서, 직접 호스팅하는 작업이 생각보다 손이 많이간다는것을 느꼈다.
호스팅에서 꾸준하게 생기는 이슈(dockerize한 이미지를 dockerhub에 배포 했더니 AWS traffic으로 과금이 일어나지를 않나, VM의 용량이 부족해서 주기적으로 docker image prune을 해줘야하질 않나)를 본업이 있는 와중에 해결하다보니,
간단한 이슈임에도 꽤 오랜기간이 서비스가 중단된채로 방치되고, 이런 이슈가 반복되다보니 서서히 끈기를 잃어가는것을 느꼈다. &lt;/p&gt;
&lt;p&gt;그래서 이번 블로그에서 가장 중점적으로 본것은 &lt;code class=&quot;language-text&quot;&gt;유지보수가 편한것&lt;/code&gt;이다. 유지보수가 편하려면,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;호스팅을 직접하지 않는 서비스&lt;/li&gt;
&lt;li&gt;유명한 서비스&lt;/li&gt;
&lt;li&gt;평소 사용하던 언어 등을 사용하는 서비스여야했다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이 조건을 모두 만족하는 서비스를 찾다보니, &lt;a href=&quot;https://pages.github.com/&quot;&gt;github pages&lt;/a&gt;+&lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;gatsby&lt;/a&gt;를 찾게되었다.
호스팅을 &lt;a href=&quot;https://pages.github.com/&quot;&gt;github pages&lt;/a&gt;로 대신해주고, 유명하고(github star 3만개), 평소사용하던 markdown, nodejs/React 를 사용하는 서비스였다.
&lt;img width=&quot;1100&quot; alt=&quot;gatsby_star&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57585873-de495400-7528-11e9-8806-0625d52d1d48.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;github pages&lt;/a&gt;+&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;jekyll&lt;/a&gt;, &lt;a href=&quot;https://medium.com&quot;&gt;medium&lt;/a&gt;, &lt;a href=&quot;https://wordpress.com/&quot;&gt;가입형 wordpress&lt;/a&gt; 들도 고려해보았지만,
React의 생태계를 모두 사용할 수 있다는 말에 넘어가서 gatsby를 사용하기로 결정했다.  &lt;/p&gt;
&lt;h3&gt;설치 과정&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이 가이드는 &lt;a href=&quot;https://github.com/alxshelepenok/gatsby-starter-lumen&quot;&gt;gatsby-starter-lumen&lt;/a&gt;을 사용한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gatsby-cli 설치, starter를 이용해 블로그 프로젝트 생성(yarn 대신 npm을 사용해도 무관.)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; blog &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; blog
yarn global add gatsby-cli
gatsby new kujyp https://github.com/alxshelepenok/gatsby-starter-lumen
&lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; kujyp&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;github pages 세팅&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;username.github.io repo를 생성(&lt;a href=&quot;https://github.com/kujyp/kujyp.github.io&quot;&gt;https://github.com/kujyp/kujyp.github.io&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;development branch에 stareter code를 push.(master는 build 결과물을 올려야한다.)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; init
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; checkout -b development
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; add &lt;span class=&quot;token keyword&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; commit -m &lt;span class=&quot;token string&quot;&gt;&quot;init with starter&quot;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; remote add origin https://github.com/kujyp/kujyp.github.io.git
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; push -u origin development&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;starter config 변경&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gatsby-config.js 에서 siteMetadata 를 수정한다.&lt;/li&gt;
&lt;li&gt;disqusShortname 은 아래의 가이드대로 추가한다.&lt;/li&gt;
&lt;li&gt;contact page 는 삭제했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;github pages 배포&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;package.json 에서 deploy 명령어를 변경한다.&lt;br/&gt;
&lt;code class=&quot;language-text&quot;&gt;gh-pages -d public -b master&lt;/code&gt;
&lt;img width=&quot;993&quot; alt=&quot;packagejson_deploy&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57585875-de495400-7528-11e9-8467-3387420f1e64.png&quot;&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;deploy를 실행한다. 30초정도 소요된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;yarn run deploy&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;img width=&quot;646&quot; alt=&quot;yarn_deploy&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57585878-dee1ea80-7528-11e9-9585-bdb5982fffa1.png&quot;&gt;
&lt;img width=&quot;663&quot; alt=&quot;yarn_deploy2&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57585879-df7a8100-7528-11e9-8142-5b57ac0864ae.png&quot;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;개발모드(hot reloading 기능이 지원되서 파일을 수정하면 localhost 페이지에 바로 반영된다.)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;gatsby develop&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;img width=&quot;1390&quot; alt=&quot;develop&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57585863-dd182700-7528-11e9-9055-151aac35fa6d.png&quot;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;disqus 추가하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://disqus.com&quot;&gt;https://disqus.com&lt;/a&gt; 에 접속해서 사이트를 추가한다. disqusShortname 을 받아와야한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;get started 클릭
&lt;img width=&quot;1131&quot; alt=&quot;disqus_getstarted_1&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57585867-dd182700-7528-11e9-8ca8-33d0f2d03b62.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I want to install Disqus on my site 클릭
&lt;img width=&quot;571&quot; alt=&quot;disqus_install_2&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57585868-ddb0bd80-7528-11e9-8fb7-e2b021f95fff.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;website name 입력, category 선택
&lt;img width=&quot;767&quot; alt=&quot;disqus_create_3&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57585865-dd182700-7528-11e9-92ff-4ee3d327e52f.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;basic plan 선택(무료)
&lt;img width=&quot;936&quot; alt=&quot;disqus_setup_plan_4&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57585870-ddb0bd80-7528-11e9-80d0-257b2a2973aa.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;지킬 등 site generator 어느 것 사용했냐고 물어보는데, 맨 하단 &lt;code class=&quot;language-text&quot;&gt;I dont&amp;#39;s see my platform ~&lt;/code&gt; 선택
&lt;img width=&quot;1093&quot; alt=&quot;disqus_setup_type_5&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57585871-ddb0bd80-7528-11e9-9e44-0bd489a388ff.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;website URL 입력, Complete Setup 클릭
&lt;img width=&quot;1108&quot; alt=&quot;disqus_setup_6&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57585869-ddb0bd80-7528-11e9-9fd1-5fee68146b71.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이제 사이트 추가는 완료되었다.&lt;br/&gt;
admin 페이지에서 settings - general 선택, shortname을 받아온다. &lt;br/&gt;
위의 프로젝트에서 gatsby-config.js disqusShortname 필드를 수정해준다.
&lt;img width=&quot;1085&quot; alt=&quot;disqus_site_general_shortname_7&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57585872-de495400-7528-11e9-8172-2914a13b66dd.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;댓글기능 추가 완료
&lt;img width=&quot;450&quot; alt=&quot;disqus_complete&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57585864-dd182700-7528-11e9-895c-a96375a02878.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;글 posting&lt;/h3&gt;
&lt;p&gt;이제 마지막으로 블로그 글을 포스팅하는 작업만 진행하면 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;starter에 포함되어있는 형식대로 src/pages/articles 에 폴더를 하나 생성한다.&lt;/li&gt;
&lt;li&gt;필요한 사진파일은 폴더내부에 같이 포함시켜준다.&lt;br/&gt;
(사용할때는 &lt;code class=&quot;language-text&quot;&gt;![description](./filename)&lt;/code&gt; 으로 사용하면된다.&lt;/li&gt;
&lt;li&gt;markdown파일 맨 위에 frontmatter를 추가해준다.&lt;br/&gt;
starter에 있는 형식그대로 가져와서 title, date, layout 등등을 추가해주었다.&lt;/li&gt;
&lt;li&gt;아래에 글내용을 markdown 형식으로 작성하면 완성.&lt;br&gt;
&lt;img width=&quot;918&quot; alt=&quot;posting&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57585877-dee1ea80-7528-11e9-98ea-16c54f6f8131.png&quot;&gt;&lt;/li&gt;
&lt;li&gt;글 작성은 &lt;code class=&quot;language-text&quot;&gt;yarn run develop&lt;/code&gt; 커맨드를 통해 localhost:8000 에서 결과물을 확인하면서 진행하였다.
&lt;img width=&quot;1370&quot; alt=&quot;posting_develop&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57585876-dee1ea80-7528-11e9-8e88-c7ef5a135b46.png&quot;&gt;&lt;/li&gt;
&lt;li&gt;마지막으로 development branch에 수정내용을 commit, push해주고, master branch에 deploy를 진행한다.&lt;br/&gt;
&lt;code class=&quot;language-text&quot;&gt;$ yarn run deploy&lt;/code&gt;
&lt;img width=&quot;663&quot; alt=&quot;yarn_deploy2&quot; src=&quot;https://user-images.githubusercontent.com/19223089/57585879-df7a8100-7528-11e9-8142-5b57ac0864ae.png&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;마치며&lt;/h3&gt;
&lt;p&gt;gatsby를 활용하여, 인생 처음으로 기술블로그를 생성, 포스팅을 진행해보았다.&lt;br/&gt;
글쓰는게 생각보다… 쉽지않다.&lt;br/&gt;
1월 2일부터 쓰기시작해서 2일에 걸쳐 쓴것같은데, 다음글부터는 되도록 한호흡만에 글을 끝내도록 노력 해봐야겠다. 1편 2편으로 나눠야하나..&lt;/p&gt;
&lt;p&gt;아 그리고 markdown 한줄만 띄우는방법을 몰라서&lt;code class=&quot;language-text&quot;&gt;&amp;lt;br/&amp;gt;&lt;/code&gt; 태그를 줄마다 붙이고있는데, 너무 불편하다.&lt;br/&gt;
github wiki에서도 이랬는데, github issue에서는 안그러고 완전 중구난방이다.(더 쉬운 방법 아시는분은 알려주세요…ㅜㅜ)&lt;/p&gt;
&lt;p&gt;아무튼 이번글은 여기까지 마치고, 다음 글에서는 시간이 허락한다면 circleci를 활용해 deploy과정 자동화를 진행해봐야겠다.&lt;/p&gt;
&lt;h3&gt;도움을 받았던 링크들&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://adhrinae.github.io/posts/creating-new-blog-with-gatsby&quot;&gt;Gatsby를 활용한 블로그 재구성 - adhrinae님&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.shik.kr/migrate-to-gatsby/&quot;&gt;Jekyll에서 Gatsby로 - shik님&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://heechan.me&quot;&gt;heechan님 블로그&lt;/a&gt;(UI가 깔끔해서 이분이 사용한 starter를 사용했다.)&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item></channel></rss>