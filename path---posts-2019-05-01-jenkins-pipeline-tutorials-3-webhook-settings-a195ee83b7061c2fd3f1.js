webpackJsonp([0x74f6f16a31be],{414:function(e,n){e.exports={data:{site:{siteMetadata:{title:"kujyp 개발블로그",subtitle:"ML DevOps, Python, Docker ...",author:{name:"kujyp",github:"kujyp"},disqusShortname:"kujyp",url:"https://kujyp.github.io"}},markdownRemark:{id:"/home/circleci/app/src/pages/posts/2019-05-01---Jenkins-pipeline-tutorials---3--Webhook-settings.md absPath of file >>> MarkdownRemark",html:'<h3>개요</h3>\n<p>아래 스펙의 jenkins를 설치하는것을 목적으로 합니다.</p>\n<ul>\n<li>jenkins(host container)를 docker image를 사용하여 구동합니다.</li>\n<li>jenkins login을 github auth와 연동합니다.</li>\n<li>UI로 blueocean을 사용합니다.</li>\n<li>Jenkins job item 으로 pipeline job(organization, multi branch) 을 사용합니다.</li>\n<li>Groovy 언어로 작성된 Jenkinsfile 을 사용합니다.</li>\n<li>메일발송으로 emailext plugin를 사용합니다.</li>\n<li>jenkins job을 docker agent를 사용하여 구동합니다.(위의 host container와 구분되는 runner container 입니다)</li>\n</ul>\n<h2>목차</h2>\n<ul>\n<li>\n<p><a href="/posts/2019-04-14---Jenkins-pipeline-tutorials---1--Install-Jenkins/">1. Install Jenkins</a></p>\n<ul>\n<li>1-1. docker 설치</li>\n<li>1-2. jenkins container 실행</li>\n<li>1-3. jenkins web 접속</li>\n</ul>\n</li>\n<li>\n<p><a href="/posts/2019-04-25---Jenkins-pipeline-tutorials---2--Install-github-authentication-plugin/">2. Install github authentication plugin</a></p>\n<ul>\n<li>2-1. plugin 설치</li>\n<li>2-2. plugin 설정</li>\n</ul>\n</li>\n<li><a href="/posts/2019-05-01---Jenkins-pipeline-tutorials---3--Webhook-settings/"><strong>3. Webhook settings</strong></a></li>\n<li>\n<p><a href="/posts/2019-05-06---Jenkins-pipeline-tutorials---4--Jenkins-Job-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/">4. Jenkins Job 생성하기</a></p>\n<ul>\n<li>4-1. Pipeline Organization job 생성하기</li>\n<li>4-2. tag automatic trigger 문제</li>\n<li>4-3. tag automatic trigger 문제해결</li>\n</ul>\n</li>\n<li>\n<p>(미작성)</p>\n<ul>\n<li>\n<ol start="5">\n<li>jenkins concurrency\n<br/></li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h2>과정</h2>\n<h3>3. Webhook settings</h3>\n<ul>\n<li>GitHub 에서 일어나는 push, commit, tag 등의 액션을 Webhook 으로 Jenkins 에서 받아보도록 설정합니다.</li>\n<li>Manage Jenkins > Configure System > GitHub > Add GitHub Server<br/>\n<img src="https://user-images.githubusercontent.com/19223089/57017957-604d9900-6c5c-11e9-9812-e4c9a077457c.gif" alt="3d942b0696990457e5a931ed8fdafb4c"><br/><br/></li>\n<li>Name - github (이름은 자유입니다.)<br/>\nAPI URL - <a href="https://api.github.com">https://api.github.com</a> (기본값입니다.)를 입력해줍니다.<br/></li>\n<li>참고: GitHub Enterprise 의경우 API URL 란에 <br/>\n<a href="https://GITHUB-ENTERPRISE-URL/api/v3">https://GITHUB-ENTERPRISE-URL/api/v3</a> 를 입력해줍니다.<br/>\n<img src="https://user-images.githubusercontent.com/19223089/57018423-75c3c280-6c5e-11e9-8182-59a3d271cc22.png" alt="스크린샷 2019-05-01 오후 10 06 36">\n<br/><br/></li>\n<li>Credentials에 Add > Jenkins 를 누른 뒤<br/>\nGitHub에 접근할 계정, 패스워드, id - github-account 를 입력해줍니다. <br/>\n앞으로 진행할 Github Organization, Repository 에서 Owner 권한이 있어야합니다.<br/>\n<img src="https://user-images.githubusercontent.com/19223089/57018422-75c3c280-6c5e-11e9-99ef-6b78358cb55f.gif" alt="377fd0b313cf9429c1288c4df0111ee8">\n<br/><br/></li>\n<li>하지만 여전히 credentials 리스트에는 등록한 계정은 없고 <code class="language-text">- none -</code> 밖에 없습니다.<br/>\n<img src="https://user-images.githubusercontent.com/19223089/57018421-752b2c00-6c5e-11e9-81ef-753bd8a72191.png" alt="스크린샷 2019-05-01 오후 10 13 43">\n<br/><br/></li>\n<li>Credentials 에는 여러종류가 있는데, 방금은 <code class="language-text">Username with password</code> 를 등록했고, <br/>\nGitHub Server 의 Credentials 는 <code class="language-text">secret text</code> (GitHub Personal Access Token) 종류를 필요로 합니다.<br/>\n(방금 등록한 GitHub username, password 은 이 작업말고 다른곳에 쓰일예정입니다.)<br/>\n<br/><br/></li>\n<li>따라서 이제 <code class="language-text">secret text</code> (GitHub Personal Access Token) 을 등록해줘야 하는데, <br/>\n수동으로 <a href="https://github.com/settings/tokens/new">https://github.com/settings/tokens/new</a> 에서 Personal Access Token 을 직접 등록해도 되지만, <br/>\n이번 과정에서는 방금 등록한 GitHub username, password 를 이용해서 Personal Access Token 을 자동생성해봅니다.<br/>\n참고: <a href="https://GITHUB-ENTERPRISE-URL/settings/tokens/new">https://GITHUB-ENTERPRISE-URL/settings/tokens/new</a>\n<img src="https://user-images.githubusercontent.com/19223089/57018867-ef0fe500-6c5f-11e9-95e6-4ab457264cd6.png" alt="image">\n<br/><br/></li>\n<li>Advanced…(두개중 아래에있는것) > <br/>\nManage additional GitHub actions > Convert login and password to token 선택 <br/>\n<img src="https://user-images.githubusercontent.com/19223089/57019163-a0af1600-6c60-11e9-9886-52c701a1488f.gif" alt="077946d999a9660867eb26f6e3ff72bf">\n<br/><br/></li>\n<li>Credentials - 방금 등록한 계정 선택, Create token credentials 클릭 <br/>\n참고: GitHub Enterprise 는 API URL 을 <a href="https://GITHUB-ENTERPRISE-URL/api/v3">https://GITHUB-ENTERPRISE-URL/api/v3</a> 로 변경해줍니다. <br/>\n<img src="https://user-images.githubusercontent.com/19223089/57019161-a0af1600-6c60-11e9-8542-44b3b42ded8b.gif" alt="b9e6596277961a189ba9b616f696df73">\n<br/><br/></li>\n<li>이러면 GitHub 에는 Personal Access Token 이 생성되고, <br/>\n그 토큰이 jenkins Credentials 에 <code class="language-text">secret text</code>의 형태로 저장됩니다.<br/>\n참고: <a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a> 에서 확인가능합니다.<br/>\nGitHub Enterprise: <a href="https://GITHUB-ENTERPRISE-URL/settings/tokens">https://GITHUB-ENTERPRISE-URL/settings/tokens</a> <br/>\n<img src="https://user-images.githubusercontent.com/19223089/57019511-b709a180-6c61-11e9-8b27-578d5bc9cfcf.png" alt="image">\n<br/><br/></li>\n<li>위에 Credentials 로 돌아가면 여전히 <code class="language-text">- none -</code> 밖에 없는데, <br/>\n저장후 다시 Manage Jenkins > Configure System 를 들어오면, <br/>\n드디어 리스트에 auto generated token 이 등장합니다.<br/>\n<img src="https://user-images.githubusercontent.com/19223089/57019118-79f0df80-6c60-11e9-9aad-73d2214d65de.png" alt="image">\n<br/><br/></li>\n<li>Credentials을 고르고, Test connection으로 작동을 확인해줍니다.<br/>\n<img src="https://user-images.githubusercontent.com/19223089/57019896-b7566c80-6c62-11e9-9048-c87270e15dfe.gif" alt="fa9191e33bcbf5c33c70b05992328efd">\n<br/><br/></li>\n<li>Save 를 클릭합니다.<br/>\n<img src="https://user-images.githubusercontent.com/19223089/57020072-36e43b80-6c63-11e9-8d0e-b78c04f23b4c.png" alt="image">\n<br/><br/></li>\n<li>이제 Jenkins 는 방금 등록한 Personal Access Token 을 활용해서 <br/>\n앞으로 만들 Pipeline Organization, Multibranch job 의 GitHub Organization, Repository 에 webhook을 자동으로 생성합니다.<br/></li>\n<li>Ref: <a href="https://support.cloudbees.com/hc/en-us/articles/224543927-GitHub-webhook-configuration">cloudbees - GitHub Integration: Webhooks</a>\n<br/><br/></li>\n</ul>',fields:{slug:"/posts/2019-05-01---Jenkins-pipeline-tutorials---3--Webhook-settings/",tagSlugs:["/tags/jenkins/"]},frontmatter:{title:"Jenkins pipeline tutorials - 3. Webhook settings",tags:["jenkins"],date:"2019-05-01T22:51:00+0900",description:"GitHub 에서 일어나는 push, commit, tag 등의 액션을 Webhook 으로 Jenkins 에서 받아보도록 설정합니다."}}},pathContext:{slug:"/posts/2019-05-01---Jenkins-pipeline-tutorials---3--Webhook-settings/"}}}});
//# sourceMappingURL=path---posts-2019-05-01-jenkins-pipeline-tutorials-3-webhook-settings-a195ee83b7061c2fd3f1.js.map