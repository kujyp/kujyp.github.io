{"version":3,"sources":["webpack:///path---posts-2019-05-06-jenkins-pipeline-tutorials-4-jenkins-job-생성하기-40c30f4d1f5acfa78f31.js","webpack:///./.cache/json/posts-2019-05-06-jenkins-pipeline-tutorials-4-jenkins-job-생성하기.json"],"names":["webpackJsonp","413","module","exports","data","site","siteMetadata","title","subtitle","author","name","github","disqusShortname","url","markdownRemark","id","html","fields","slug","tagSlugs","frontmatter","tags","date","description","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,cAAAC,SAAA,gCAAAC,QAA2EC,KAAA,QAAAC,OAAA,SAAgCC,gBAAA,QAAAC,IAAA,4BAA4DC,gBAAmBC,GAAA,yIAAAC,KAAA,oqZAA24ZC,QAAoKC,KAAA,wEAAAC,UAAA,mBAA6GC,aAAgBb,MAAA,mDAAAc,MAAA,WAAAC,KAAA,2BAAAC,YAAA,kEAA+LC,aAAgBN,KAAA","file":"path---posts-2019-05-06-jenkins-pipeline-tutorials-4-jenkins-job-생성하기-40c30f4d1f5acfa78f31.js","sourcesContent":["webpackJsonp([144049471046149],{\n\n/***/ 413:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"kujyp 개발블로그\",\"subtitle\":\"ML DevOps, Python, Docker ...\",\"author\":{\"name\":\"kujyp\",\"github\":\"kujyp\"},\"disqusShortname\":\"kujyp\",\"url\":\"https://kujyp.github.io\"}},\"markdownRemark\":{\"id\":\"/home/circleci/app/src/pages/posts/2019-05-06---Jenkins-pipeline-tutorials---4--Jenkins-Job-생성하기.md absPath of file >>> MarkdownRemark\",\"html\":\"<h3>개요</h3>\\n<p>아래 스펙의 jenkins를 설치하는것을 목적으로 합니다.</p>\\n<ul>\\n<li>jenkins(host container)를 docker image를 사용하여 구동합니다.</li>\\n<li>jenkins login을 github auth와 연동합니다.</li>\\n<li>UI로 blueocean을 사용합니다.</li>\\n<li>Jenkins job item 으로 pipeline job(organization, multi branch) 을 사용합니다.</li>\\n<li>Groovy 언어로 작성된 Jenkinsfile 을 사용합니다.</li>\\n<li>메일발송으로 emailext plugin를 사용합니다.</li>\\n<li>jenkins job을 docker agent를 사용하여 구동합니다.(위의 host container와 구분되는 runner container 입니다)</li>\\n</ul>\\n<h2>목차</h2>\\n<ul>\\n<li>\\n<p><a href=\\\"/posts/2019-04-14---Jenkins-pipeline-tutorials---1--Install-Jenkins/\\\">1. Install Jenkins</a></p>\\n<ul>\\n<li>1-1. docker 설치</li>\\n<li>1-2. jenkins container 실행</li>\\n<li>1-3. jenkins web 접속</li>\\n</ul>\\n</li>\\n<li>\\n<p><a href=\\\"/posts/2019-04-25---Jenkins-pipeline-tutorials---2--Install-github-authentication-plugin/\\\">2. Install github authentication plugin</a></p>\\n<ul>\\n<li>2-1. plugin 설치</li>\\n<li>2-2. plugin 설정</li>\\n</ul>\\n</li>\\n<li><a href=\\\"/posts/2019-05-01---Jenkins-pipeline-tutorials---3--Webhook-settings/\\\">3. Webhook settings</a></li>\\n<li>\\n<p><a href=\\\"/posts/2019-05-06---Jenkins-pipeline-tutorials---4--Jenkins-Job-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/\\\"><strong>4. Jenkins Job 생성하기</strong></a></p>\\n<ul>\\n<li>4-1. Pipeline Organization job 생성하기</li>\\n<li>4-2. tag automatic trigger 문제</li>\\n<li>4-3. tag automatic trigger 문제해결</li>\\n</ul>\\n</li>\\n<li>\\n<p>(미작성)</p>\\n<ul>\\n<li>\\n<ol start=\\\"5\\\">\\n<li>jenkins concurrency\\n<br/></li>\\n</ol>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<h2>과정</h2>\\n<h3>4. Jenkins Job 생성하기</h3>\\n<h4>4-1. Pipeline Organization job 생성하기</h4>\\n<ul>\\n<li>이제 jenkins job을 생성할차례입니다.</li>\\n<li>pipeline organization job 을 추가합니다.<br/>\\norganization 전체를 주기적으로 스캔하고, jenkinsfile이 있는 repository에 자동으로 명시된 task를 수행합니다.</li>\\n<li>먼저, 등록할 Organization 에 Owner 권한이 있는 계정이 필요합니다.<br/>\\n<img width=\\\"893\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 11 42 05\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232895-958d2900-7058-11e9-8807-63de3aed212c.png\\\">\\n<br/><br/></li>\\n<li>new item > GitHub Organization<br/>\\n<img width=\\\"913\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 10 53 22\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232326-50b4c280-7057-11e9-8ad1-1de77542cccc.png\\\">\\n<br/><br/></li>\\n<li>Projects > Github Organization > Credentials - username and password 선택<br/>\\nBehaviors > Add > discovery tags 추가<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/57232307-4d213b80-7057-11e9-80b7-778091aa51e7.gif\\\" alt=\\\"681ad0d904675f814e80a97319e5282e\\\">\\n<br/><br/></li>\\n<li>Orphaned Item Strategy > Discard old items > Days to keep old items<br/>\\n저장 용량이 부담스러울것 같아 30일을 지정했습니다.(자유)<br/>\\n<img width=\\\"734\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 10 56 09\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232319-4f839580-7057-11e9-8f01-65b45ffc6185.png\\\">\\n<br/><br/></li>\\n<li>Save 클릭<br/>\\n<img width=\\\"91\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 10 56 15\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232317-4eeaff00-7057-11e9-9247-c453fbacb88a.png\\\">\\n<br/><br/></li>\\n<li>이제 Organization에 가보면 hook이 자동으로 생성된것을 확인할수있습니다.<br/>\\n<a href=\\\"https://github.com/organizations/ORGANIZATION-NAME/settings/hooks\\\">https://github.com/organizations/ORGANIZATION-NAME/settings/hooks</a> <br/>\\n<img width=\\\"871\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 10 57 19\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232313-4e526880-7057-11e9-9676-644925229ac0.png\\\">\\n<br/><br/></li>\\n<li>미리 Jenkinsfile을 넣어놓았던 repository는 CI job 실행까지 완료했네요.<br/>\\n<img width=\\\"818\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 11 04 28\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232321-4f839580-7057-11e9-8690-c2d5a67bc5c2.png\\\">\\n<br/><br/></li>\\n<li>ref: <a href=\\\"https://support.cloudbees.com/hc/en-us/articles/115003015711-GitHub-Webhook-Organization-Folder\\\">https://support.cloudbees.com/hc/en-us/articles/115003015711-GitHub-Webhook-Organization-Folder</a>\\n<br/>\\n<br/>\\n<br/></li>\\n</ul>\\n<h3>4-2. tag automatic trigger 문제</h3>\\n<ul>\\n<li>위의 설정에는 한가지 문제가 있습니다. tag를 push해도 jenkins는 job을 수행하지않습니다.</li>\\n<li>\\n<p>위의 사항을 테스트해보기위해, Jenkinsfile을 아래와 같이 두고 tag를 push해봅니다.</p>\\n<ul>\\n<li>아래 jenkinsfile의 의도는 tag를 push햇을때 <code class=\\\"language-text\\\">when { tag &#39;*&#39; }</code> 아래부분을 추가로 수행시키는것입니다.</li>\\n</ul>\\n</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-groovy\\\"><code class=\\\"language-groovy\\\"><span class=\\\"token shebang comment\\\">#!/usr/bin/env groovy</span>\\n\\npipeline <span class=\\\"token punctuation\\\">{</span>\\n    agent <span class=\\\"token punctuation\\\">{</span>\\n        docker <span class=\\\"token punctuation\\\">{</span> image <span class=\\\"token string\\\">'centos/python-36-centos7:1'</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    stages <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">stage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'printenv'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            steps <span class=\\\"token punctuation\\\">{</span>\\n                sh <span class=\\\"token string\\\">'printenv'</span>\\n                sh <span class=\\\"token string\\\">'python --version'</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token function\\\">stage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'minimal test'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            steps <span class=\\\"token punctuation\\\">{</span>\\n                echo <span class=\\\"token string\\\">'minimal test'</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token function\\\">stage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'full test'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            when <span class=\\\"token punctuation\\\">{</span> anyOf <span class=\\\"token punctuation\\\">{</span> branch <span class=\\\"token string\\\">'master'</span><span class=\\\"token punctuation\\\">;</span> branch <span class=\\\"token string\\\">'PR-*'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span>\\n            steps <span class=\\\"token punctuation\\\">{</span>\\n                echo <span class=\\\"token string\\\">'full test'</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token function\\\">stage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'deploy'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            when <span class=\\\"token punctuation\\\">{</span> tag <span class=\\\"token string\\\">'*'</span> <span class=\\\"token punctuation\\\">}</span>\\n            steps <span class=\\\"token punctuation\\\">{</span>\\n                echo <span class=\\\"token string\\\">'deploy'</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    post <span class=\\\"token punctuation\\\">{</span>\\n        always <span class=\\\"token punctuation\\\">{</span>\\n            echo <span class=\\\"token string\\\">'done...'</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        success <span class=\\\"token punctuation\\\">{</span>\\n            echo <span class=\\\"token string\\\">'success'</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        failure <span class=\\\"token punctuation\\\">{</span>\\n            echo <span class=\\\"token string\\\">'failure'</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<ul>\\n<li>\\n<p>tag push<br/>\\n<img width=\\\"591\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 11 17 45\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232318-4eeaff00-7057-11e9-97f8-acdd40b49c99.png\\\">\\n<br/><br/></p>\\n</li>\\n<li>\\n<p>push 결과로 Jenkins 작업이 돌아가지 않습니다.<br/>\\n<img width=\\\"845\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 11 18 42\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232309-4db9d200-7057-11e9-8055-d7e7accc11dc.png\\\"></p>\\n</li>\\n<li>\\n<p>의도대로라면 아래의 캡쳐처럼 tag branch의 job이 돌아가야합니다.<br/>\\n<img width=\\\"892\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 11 25 53\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232381-6d50fa80-7057-11e9-9fce-852aa36a9136.png\\\">\\n<br/><br/></p>\\n</li>\\n<li>\\n<p>Plugin issue를 찾아보니, tags에 의해 빌드가 일어나지않는것이 의도된 설계라고합니다.<br/>\\nRef: <a href=\\\"https://issues.jenkins-ci.org/browse/JENKINS-47496?focusedCommentId=317790&#x26;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-317790\\\">No automatic builds for tags - Pileline: Organization, Multibranch</a>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/57232315-4e526880-7057-11e9-85b5-b998b3c83bad.png\\\" alt=\\\"e82cff68-11b3-11e9-9e8a-0582d238b4e4\\\">\\n<br/></p>\\n</li>\\n<li>\\n<p>이는 최초 jenknis 가 오래된 tag를 모두 빌드해버리면서, CI 서버에 부하가 걸리는것을 방지하는 설계입니다.<br/>\\n이를 해결하기위해서는 build strategy plugin 설정이 필요합니다.<br/>\\nRef: <a href=\\\"https://wiki.jenkins.io/display/JENKINS/GitHub+Branch+Source+Plugin\\\">https://wiki.jenkins.io/display/JENKINS/GitHub+Branch+Source+Plugin</a><br/>\\n<br/>\\n<br/>\\n<br/></p>\\n</li>\\n</ul>\\n<h4>4-3. tag automatic trigger 문제해결</h4>\\n<ul>\\n<li><a href=\\\"https://github.com/jenkinsci/basic-branch-build-strategies-plugin/blob/master/docs/user.adoc\\\">basic branch build strategies plugin</a>을 설치해서 위의 문제를 해결합니다.</li>\\n<li>manage jenkins > plugin manager > available > basic branch build strategies 설치<br/>\\n<img width=\\\"694\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 11 21 17\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232328-50b4c280-7057-11e9-94f0-4c25f29a570d.png\\\"></li>\\n</ul>\\n<p><br/><br/></p>\\n<ul>\\n<li>item > configure > Project를 보면 Build strategies가 새로 생긴걸 확인할 수 있습니다.<br/>\\n<img width=\\\"690\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 11 24 14\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232322-501c2c00-7057-11e9-9de0-e454ff34d376.png\\\">\\n<br/><br/></li>\\n<li>Change requests(PR을 의미합니다), Tags를 추가합니다.<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/57232316-4eeaff00-7057-11e9-936c-f110560d0bb4.gif\\\" alt=\\\"66f354a89f6c5f134d23b65c03421f49\\\">\\n<br/>\\n<br/></li>\\n<li>참고: 이때 Tags에서 <code class=\\\"language-text\\\">ignore tags older than - 7</code> 옵션은 생성된지 7일이 지난 tag는 최초 tag indexing 단계에서 job을 일으키지 않는다는 옵션입니다.<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/57232329-514d5900-7057-11e9-986a-3a93fe947f2d.png\\\" alt=\\\"ddf72692-11b6-11e9-9512-0c795280cef5\\\">\\nRef: <a href=\\\"https://github.com/jenkinsci/basic-branch-build-strategies-plugin/blob/master/docs/user.adoc\\\">https://github.com/jenkinsci/basic-branch-build-strategies-plugin/blob/master/docs/user.adoc</a> <br/>\\n<br/><br/></li>\\n<li>이번에는 tag push event가 재대로 jenkins job을 유발하는것을 확인할 수 있습니다.<br/>\\n<img width=\\\"664\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 11 25 28\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232351-5ad6c100-7057-11e9-94bc-d308ca7d044d.png\\\">\\n<img width=\\\"892\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 11 25 53\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232381-6d50fa80-7057-11e9-9fce-852aa36a9136.png\\\">\\n<br/><br/></li>\\n<li>deploy stage 를 실행했습니다.<br/>\\n<img width=\\\"856\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 11 26 10\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232352-5ad6c100-7057-11e9-9e50-4ebb3cce9baf.png\\\">\\n<br/><br/>\\n<br/></li>\\n</ul>\",\"fields\":{\"slug\":\"/posts/2019-05-06---Jenkins-pipeline-tutorials---4--Jenkins-Job-생성하기/\",\"tagSlugs\":[\"/tags/jenkins/\"]},\"frontmatter\":{\"title\":\"Jenkins pipeline tutorials - 4. Jenkins Job 생성하기\",\"tags\":[\"jenkins\"],\"date\":\"2019-05-07T00:07:00+0900\",\"description\":\"이제 jenkins job을 생성할차례입니다. pipeline organization job 을 추가합니다.\"}}},\"pathContext\":{\"slug\":\"/posts/2019-05-06---Jenkins-pipeline-tutorials---4--Jenkins-Job-생성하기/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-2019-05-06-jenkins-pipeline-tutorials-4-jenkins-job-생성하기-40c30f4d1f5acfa78f31.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"kujyp 개발블로그\",\"subtitle\":\"ML DevOps, Python, Docker ...\",\"author\":{\"name\":\"kujyp\",\"github\":\"kujyp\"},\"disqusShortname\":\"kujyp\",\"url\":\"https://kujyp.github.io\"}},\"markdownRemark\":{\"id\":\"/home/circleci/app/src/pages/posts/2019-05-06---Jenkins-pipeline-tutorials---4--Jenkins-Job-생성하기.md absPath of file >>> MarkdownRemark\",\"html\":\"<h3>개요</h3>\\n<p>아래 스펙의 jenkins를 설치하는것을 목적으로 합니다.</p>\\n<ul>\\n<li>jenkins(host container)를 docker image를 사용하여 구동합니다.</li>\\n<li>jenkins login을 github auth와 연동합니다.</li>\\n<li>UI로 blueocean을 사용합니다.</li>\\n<li>Jenkins job item 으로 pipeline job(organization, multi branch) 을 사용합니다.</li>\\n<li>Groovy 언어로 작성된 Jenkinsfile 을 사용합니다.</li>\\n<li>메일발송으로 emailext plugin를 사용합니다.</li>\\n<li>jenkins job을 docker agent를 사용하여 구동합니다.(위의 host container와 구분되는 runner container 입니다)</li>\\n</ul>\\n<h2>목차</h2>\\n<ul>\\n<li>\\n<p><a href=\\\"/posts/2019-04-14---Jenkins-pipeline-tutorials---1--Install-Jenkins/\\\">1. Install Jenkins</a></p>\\n<ul>\\n<li>1-1. docker 설치</li>\\n<li>1-2. jenkins container 실행</li>\\n<li>1-3. jenkins web 접속</li>\\n</ul>\\n</li>\\n<li>\\n<p><a href=\\\"/posts/2019-04-25---Jenkins-pipeline-tutorials---2--Install-github-authentication-plugin/\\\">2. Install github authentication plugin</a></p>\\n<ul>\\n<li>2-1. plugin 설치</li>\\n<li>2-2. plugin 설정</li>\\n</ul>\\n</li>\\n<li><a href=\\\"/posts/2019-05-01---Jenkins-pipeline-tutorials---3--Webhook-settings/\\\">3. Webhook settings</a></li>\\n<li>\\n<p><a href=\\\"/posts/2019-05-06---Jenkins-pipeline-tutorials---4--Jenkins-Job-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/\\\"><strong>4. Jenkins Job 생성하기</strong></a></p>\\n<ul>\\n<li>4-1. Pipeline Organization job 생성하기</li>\\n<li>4-2. tag automatic trigger 문제</li>\\n<li>4-3. tag automatic trigger 문제해결</li>\\n</ul>\\n</li>\\n<li>\\n<p>(미작성)</p>\\n<ul>\\n<li>\\n<ol start=\\\"5\\\">\\n<li>jenkins concurrency\\n<br/></li>\\n</ol>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<h2>과정</h2>\\n<h3>4. Jenkins Job 생성하기</h3>\\n<h4>4-1. Pipeline Organization job 생성하기</h4>\\n<ul>\\n<li>이제 jenkins job을 생성할차례입니다.</li>\\n<li>pipeline organization job 을 추가합니다.<br/>\\norganization 전체를 주기적으로 스캔하고, jenkinsfile이 있는 repository에 자동으로 명시된 task를 수행합니다.</li>\\n<li>먼저, 등록할 Organization 에 Owner 권한이 있는 계정이 필요합니다.<br/>\\n<img width=\\\"893\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 11 42 05\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232895-958d2900-7058-11e9-8807-63de3aed212c.png\\\">\\n<br/><br/></li>\\n<li>new item > GitHub Organization<br/>\\n<img width=\\\"913\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 10 53 22\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232326-50b4c280-7057-11e9-8ad1-1de77542cccc.png\\\">\\n<br/><br/></li>\\n<li>Projects > Github Organization > Credentials - username and password 선택<br/>\\nBehaviors > Add > discovery tags 추가<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/57232307-4d213b80-7057-11e9-80b7-778091aa51e7.gif\\\" alt=\\\"681ad0d904675f814e80a97319e5282e\\\">\\n<br/><br/></li>\\n<li>Orphaned Item Strategy > Discard old items > Days to keep old items<br/>\\n저장 용량이 부담스러울것 같아 30일을 지정했습니다.(자유)<br/>\\n<img width=\\\"734\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 10 56 09\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232319-4f839580-7057-11e9-8f01-65b45ffc6185.png\\\">\\n<br/><br/></li>\\n<li>Save 클릭<br/>\\n<img width=\\\"91\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 10 56 15\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232317-4eeaff00-7057-11e9-9247-c453fbacb88a.png\\\">\\n<br/><br/></li>\\n<li>이제 Organization에 가보면 hook이 자동으로 생성된것을 확인할수있습니다.<br/>\\n<a href=\\\"https://github.com/organizations/ORGANIZATION-NAME/settings/hooks\\\">https://github.com/organizations/ORGANIZATION-NAME/settings/hooks</a> <br/>\\n<img width=\\\"871\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 10 57 19\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232313-4e526880-7057-11e9-9676-644925229ac0.png\\\">\\n<br/><br/></li>\\n<li>미리 Jenkinsfile을 넣어놓았던 repository는 CI job 실행까지 완료했네요.<br/>\\n<img width=\\\"818\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 11 04 28\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232321-4f839580-7057-11e9-8690-c2d5a67bc5c2.png\\\">\\n<br/><br/></li>\\n<li>ref: <a href=\\\"https://support.cloudbees.com/hc/en-us/articles/115003015711-GitHub-Webhook-Organization-Folder\\\">https://support.cloudbees.com/hc/en-us/articles/115003015711-GitHub-Webhook-Organization-Folder</a>\\n<br/>\\n<br/>\\n<br/></li>\\n</ul>\\n<h3>4-2. tag automatic trigger 문제</h3>\\n<ul>\\n<li>위의 설정에는 한가지 문제가 있습니다. tag를 push해도 jenkins는 job을 수행하지않습니다.</li>\\n<li>\\n<p>위의 사항을 테스트해보기위해, Jenkinsfile을 아래와 같이 두고 tag를 push해봅니다.</p>\\n<ul>\\n<li>아래 jenkinsfile의 의도는 tag를 push햇을때 <code class=\\\"language-text\\\">when { tag &#39;*&#39; }</code> 아래부분을 추가로 수행시키는것입니다.</li>\\n</ul>\\n</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-groovy\\\"><code class=\\\"language-groovy\\\"><span class=\\\"token shebang comment\\\">#!/usr/bin/env groovy</span>\\n\\npipeline <span class=\\\"token punctuation\\\">{</span>\\n    agent <span class=\\\"token punctuation\\\">{</span>\\n        docker <span class=\\\"token punctuation\\\">{</span> image <span class=\\\"token string\\\">'centos/python-36-centos7:1'</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    stages <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">stage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'printenv'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            steps <span class=\\\"token punctuation\\\">{</span>\\n                sh <span class=\\\"token string\\\">'printenv'</span>\\n                sh <span class=\\\"token string\\\">'python --version'</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token function\\\">stage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'minimal test'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            steps <span class=\\\"token punctuation\\\">{</span>\\n                echo <span class=\\\"token string\\\">'minimal test'</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token function\\\">stage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'full test'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            when <span class=\\\"token punctuation\\\">{</span> anyOf <span class=\\\"token punctuation\\\">{</span> branch <span class=\\\"token string\\\">'master'</span><span class=\\\"token punctuation\\\">;</span> branch <span class=\\\"token string\\\">'PR-*'</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span>\\n            steps <span class=\\\"token punctuation\\\">{</span>\\n                echo <span class=\\\"token string\\\">'full test'</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token function\\\">stage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'deploy'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            when <span class=\\\"token punctuation\\\">{</span> tag <span class=\\\"token string\\\">'*'</span> <span class=\\\"token punctuation\\\">}</span>\\n            steps <span class=\\\"token punctuation\\\">{</span>\\n                echo <span class=\\\"token string\\\">'deploy'</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    post <span class=\\\"token punctuation\\\">{</span>\\n        always <span class=\\\"token punctuation\\\">{</span>\\n            echo <span class=\\\"token string\\\">'done...'</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        success <span class=\\\"token punctuation\\\">{</span>\\n            echo <span class=\\\"token string\\\">'success'</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        failure <span class=\\\"token punctuation\\\">{</span>\\n            echo <span class=\\\"token string\\\">'failure'</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<ul>\\n<li>\\n<p>tag push<br/>\\n<img width=\\\"591\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 11 17 45\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232318-4eeaff00-7057-11e9-97f8-acdd40b49c99.png\\\">\\n<br/><br/></p>\\n</li>\\n<li>\\n<p>push 결과로 Jenkins 작업이 돌아가지 않습니다.<br/>\\n<img width=\\\"845\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 11 18 42\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232309-4db9d200-7057-11e9-8055-d7e7accc11dc.png\\\"></p>\\n</li>\\n<li>\\n<p>의도대로라면 아래의 캡쳐처럼 tag branch의 job이 돌아가야합니다.<br/>\\n<img width=\\\"892\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 11 25 53\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232381-6d50fa80-7057-11e9-9fce-852aa36a9136.png\\\">\\n<br/><br/></p>\\n</li>\\n<li>\\n<p>Plugin issue를 찾아보니, tags에 의해 빌드가 일어나지않는것이 의도된 설계라고합니다.<br/>\\nRef: <a href=\\\"https://issues.jenkins-ci.org/browse/JENKINS-47496?focusedCommentId=317790&#x26;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-317790\\\">No automatic builds for tags - Pileline: Organization, Multibranch</a>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/57232315-4e526880-7057-11e9-85b5-b998b3c83bad.png\\\" alt=\\\"e82cff68-11b3-11e9-9e8a-0582d238b4e4\\\">\\n<br/></p>\\n</li>\\n<li>\\n<p>이는 최초 jenknis 가 오래된 tag를 모두 빌드해버리면서, CI 서버에 부하가 걸리는것을 방지하는 설계입니다.<br/>\\n이를 해결하기위해서는 build strategy plugin 설정이 필요합니다.<br/>\\nRef: <a href=\\\"https://wiki.jenkins.io/display/JENKINS/GitHub+Branch+Source+Plugin\\\">https://wiki.jenkins.io/display/JENKINS/GitHub+Branch+Source+Plugin</a><br/>\\n<br/>\\n<br/>\\n<br/></p>\\n</li>\\n</ul>\\n<h4>4-3. tag automatic trigger 문제해결</h4>\\n<ul>\\n<li><a href=\\\"https://github.com/jenkinsci/basic-branch-build-strategies-plugin/blob/master/docs/user.adoc\\\">basic branch build strategies plugin</a>을 설치해서 위의 문제를 해결합니다.</li>\\n<li>manage jenkins > plugin manager > available > basic branch build strategies 설치<br/>\\n<img width=\\\"694\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 11 21 17\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232328-50b4c280-7057-11e9-94f0-4c25f29a570d.png\\\"></li>\\n</ul>\\n<p><br/><br/></p>\\n<ul>\\n<li>item > configure > Project를 보면 Build strategies가 새로 생긴걸 확인할 수 있습니다.<br/>\\n<img width=\\\"690\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 11 24 14\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232322-501c2c00-7057-11e9-9de0-e454ff34d376.png\\\">\\n<br/><br/></li>\\n<li>Change requests(PR을 의미합니다), Tags를 추가합니다.<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/57232316-4eeaff00-7057-11e9-936c-f110560d0bb4.gif\\\" alt=\\\"66f354a89f6c5f134d23b65c03421f49\\\">\\n<br/>\\n<br/></li>\\n<li>참고: 이때 Tags에서 <code class=\\\"language-text\\\">ignore tags older than - 7</code> 옵션은 생성된지 7일이 지난 tag는 최초 tag indexing 단계에서 job을 일으키지 않는다는 옵션입니다.<br/>\\n<img src=\\\"https://user-images.githubusercontent.com/19223089/57232329-514d5900-7057-11e9-986a-3a93fe947f2d.png\\\" alt=\\\"ddf72692-11b6-11e9-9512-0c795280cef5\\\">\\nRef: <a href=\\\"https://github.com/jenkinsci/basic-branch-build-strategies-plugin/blob/master/docs/user.adoc\\\">https://github.com/jenkinsci/basic-branch-build-strategies-plugin/blob/master/docs/user.adoc</a> <br/>\\n<br/><br/></li>\\n<li>이번에는 tag push event가 재대로 jenkins job을 유발하는것을 확인할 수 있습니다.<br/>\\n<img width=\\\"664\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 11 25 28\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232351-5ad6c100-7057-11e9-94bc-d308ca7d044d.png\\\">\\n<img width=\\\"892\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 11 25 53\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232381-6d50fa80-7057-11e9-9fce-852aa36a9136.png\\\">\\n<br/><br/></li>\\n<li>deploy stage 를 실행했습니다.<br/>\\n<img width=\\\"856\\\" alt=\\\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2019-05-06 &#x110B;&#x1169;&#x1112;&#x116E; 11 26 10\\\" src=\\\"https://user-images.githubusercontent.com/19223089/57232352-5ad6c100-7057-11e9-9e50-4ebb3cce9baf.png\\\">\\n<br/><br/>\\n<br/></li>\\n</ul>\",\"fields\":{\"slug\":\"/posts/2019-05-06---Jenkins-pipeline-tutorials---4--Jenkins-Job-생성하기/\",\"tagSlugs\":[\"/tags/jenkins/\"]},\"frontmatter\":{\"title\":\"Jenkins pipeline tutorials - 4. Jenkins Job 생성하기\",\"tags\":[\"jenkins\"],\"date\":\"2019-05-07T00:07:00+0900\",\"description\":\"이제 jenkins job을 생성할차례입니다. pipeline organization job 을 추가합니다.\"}}},\"pathContext\":{\"slug\":\"/posts/2019-05-06---Jenkins-pipeline-tutorials---4--Jenkins-Job-생성하기/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-2019-05-06-jenkins-pipeline-tutorials-4-jenkins-job-생성하기.json\n// module id = 413\n// module chunks = 144049471046149"],"sourceRoot":""}